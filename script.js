const divHistory = document.getElementById('div_history');
const divArchitecture = document.getElementById('div_architecture');
const divCPU = document.getElementById('div_cpu');
const divCash = document.getElementById('div_cash');
const divBus = document.getElementById('div_bus');
const divMemory = document.getElementById('div_memory');
const divRAM = document.getElementById('div_ram');
const divTimeout = document.getElementById('div_timeout');
const divHDD = document.getElementById('div_hdd');
const divVideoCard = document.getElementById('div_video_card');
const divInterfase = document.getElementById('div_interfase');

const elem = Array.from(document.querySelectorAll('.elem'));
const main = document.querySelector('.main');

const history = document.getElementById('history');
const architecture = document.getElementById('architecture');
const cpu = document.getElementById('cpu');
const cash = document.getElementById('cash');
const bus = document.getElementById('bus');
const memory = document.getElementById('memory');
const ram = document.getElementById('ram');
const timeout = document.getElementById('timeout');
const hdd = document.getElementById('hdd');
const videoCard = document.getElementById('vodeo_card');
const interfaces = document.getElementById('interfaces');


const divHistoryText = `<h2 id="history">История вычислительной техники</h2>
<p>Историю развития вычислительной техники можно разделить на 4 этапа:</p>
<p>В первые название персональный компьютер было введено в обращение в 1981 году. Первая операционная система была разработана фирмой Microsoft и названа MS DOS. Новая модель ЭBM была собрана в 1984 году на основе процессора Intel 286. C 1993 года было запущенно производство компьютеров на базе процессора Intel 586 Pentium.</p>
<ul>
    <li>Ручной (с 50-го тысячелетия до н.э.);</li>
    <li>Механический (с середины 17 века до 90-х годов 19 века);</li>
    <li>Электромеханический (с 90-х годов 19 века до 40-х годов 20 века);</li>
    <li>Электронный (с 40-х годов 20 века).</li>
</ul>
<h4>Ручной этап</h4>
<p>С древнейших времен человек конструирует себе в помощь различные приспособления для облегчения вычислений. Например, греки и египтяне использовали абак (устройство похожее на русские счеты) для арифметических вычислений.</p>
<p>А в начале 17 века шотландский математик Джон Непер изобрел математический набор, состоящий из брусков с нанесенными на них цифрами от 0 до 9 и кратными им числами. Для умножения какого-либо числа два бруска располагали рядом так, чтобы цифры на торцах составляли это число. На боковых сторонах брусков после несложных вычислений можно увидеть ответ. </p>
<h4>Механический этап</h4>
<p>Механический этап ознаменуется проектом одной из первых механических суммирующих машин разработанный немецким ученым Вильгельмом Шиккардом. </p>
<p>В 40-х годах XVII один из крупнейших ученых Блез Паскаль изобрел и изготовил механическое устройство, позволяющее складывать числа.</p>
<p>А в конце XVII века математик и философ Готфридом Лейбницем изобрел механическое устройство, которое позволяло не только складывать числа, но и умножать их. В работах Лейбница также шла речь и о механическом устройстве, которое может оперировать со словами и понятиями.</p>
<h4>Электромеханический этап</h4>
<p>Важный прогресс в историю развития вычислительной техники внес Чарльз Беббидж. Он, соединив идею механической арифметической машины Лейбница с идеей программного управления, разработал проект «аналитической» машины. Этот проект не был реализован, однако по своим возможностям машина Беббиджа не уступала первым ЭВМ: в ней была предусмотрена память для хранения 1000 чисел по 50 десятичных знаков, арифметические операции выполнялись в соответствии с программой. записанных на жаккардовских перфокартах. В программе можно было задавать автоматическое повторение групп арифметических операций, а также выполнение группы операций только при определенном условии. </p>
<h4>Электронный этап</h4>
<p>Электронный этап ознаменован созданием первой ЭВМ, ENIAC (Electronic Numerical Integrator and Computer — электронный числовой интегратор и вычислитель), созданная в США в 1946 году.</p>
<p>Вес машины составлял 30 тонн, она требовала для размещения 170 квадратных метров площади. </p>
<p>Производительность составляла 300 умножений или 5000 сложений в секунду.</p>
<p>Ввод/вывод данных осуществлялся через перфокарты, а программирование — путём ручной установки переключателей в нужные положения. Для того чтобы задать новую программу, требовались недели.</p>
<p>Проект ENIAC существовал в единственном экземпляре и никогда не был повторен.</p>
<p>История развития современных ЭВМ разделяют на 5 поколений:</p>
<h4>Первое поколение ЭВМ 1946 — 1953 гг.</h4>
<p>Элементной базой машин этого поколения были электронные лампы – диоды и триоды. Машины предназначались для решения сравнительно несложных научно-технических задач.</p>
<p>Они были значительных размеров, потребляли большую мощность, имели невысокую надежность работы и слабое программное обеспечение. Быстродействие их не превышало 2—3 тысяч операций в секунду, емкость оперативной памяти—2 КВ.</p>
<h4>Второе поколение ЭВМ 1953 — 1959 гг.</h4>
<p>Элементной базой машин этого поколения были полупроводниковые приборы. </p>
<p>Появление полупроводниковых элементов в электронных схемах существенно увеличило емкость оперативной памяти, надежность и быстродействие ЭВМ. Уменьшились размеры, масса и потребляемая мощность. </p>
<p>С появлением машин второго поколения значительно расширилась сфера использования электронной вычислительной техники, главным образом за счет развития программного обеспечения. Появились также специализированные машины, например, ЭВМ для решения экономических задач, для управления производственными процессами, системами передачи информации и т.д.</p>
<p>Именно в этот период возникла профессия специалиста по информатике, и многие университеты стали предоставлять возможность получения образования в этой области.</p>
<h4>Третье поколение ЭВМ 1959 — 1970 гг.</h4>
<p>Элементная база ЭВМ - малые интегральные схемы (МИС). Машины предназначались для широкого использования в различных областях науки и техники (проведение расчетов, управление производством, подвижными объектами и др.). </p>
<p>Благодаря интегральным схемам удалось существенно улучшить технико-эксплуатационные характеристики ЭВМ. Например, машины третьего поколения по сравнению с машинами второго поколения имеют больший объем оперативной памяти, увеличилось быстродействие, повысилась надежность, а потребляемая мощность, занимаемая площадь и масса уменьшились.</p>
<h4>Четвертое поколение ЭВМ 1970 — 1974 гг.</h4>
<p>Элементная база ЭВМ - большие интегральные схемы (БИС). Машины предназначались для резкого повышения производительности труда в науке, производстве, управлении, здравоохранении, обслуживании и быту. </p>
<p>Высокая степень интеграции способствует увеличению плотности компоновки электронной аппаратуры, повышению ее надежности, что ведет к увеличению быстродействия ЭВМ и снижению ее стоимости. </p>
<h4>Пятое поколение ЭВМ 1974 - …гг.</h4>
<p>В 1974 году несколько фирм объявила о создании на основе микропроцессора Intel-8008 компьютера, т.е. устройства выполняющего те же функции, что и большая ЭВМ. </p>
<p>В начале 1975 года появился первый коммерчески распространенный компьютер, построенный на основе микропроцессора Intel - 8080. </p>
<p>Первым портативным персональный компьютер Osborne-1 (1981). Его процессор ZiLOG Z80A, 64 Кбайт оперативной памяти, клавиатура, модем, два дисковода 5,25-дюйма помещались в складном чемоданчике. Все это весило свыше 10 кг.</p>
<p>Основоположником отечественной вычислительной техники стал Сергей Алексеевич Лебедев под его руководством были созданы первые отечественные ЭВМ «БЭСМ» и «ЭВМ М-2».</p>
<p>В 1980 году руководство IBM приняло решение о создании персонального компьютера. При его конструировании был применен принцип открытой архитектуры: составные части были универсальными, что позволяло модернизировать компьютер по частям. </p>
<p>Появление IBM PC в 1981 году породило лавинообразный спрос на персональные компьютеры, которые стали теперь орудием труда людей самых разных профессий. Наряду с этим возник гигантский спрос на программное обеспечение и компьютерную периферию. На этой волне возникли сотни новых фирм, занявших свои ниши компьютерного рынка.</p>
<h3 id="history_2">Основные сведения об ЭВМ</h3>
<p>ЭВМ бывает 2х видов аналоговые и цифровые. Цифровые ЭВМ в отличии от аналоговых, обладают следующими свойствами:</p>
<ul>
    <li>Ввод/вывод информации автоматизирован;</li>
    <li>Операции выполняются последовательно.</li>
</ul>
<p>Кол-во обрабатываемой информации в ЭВМ, можно оценить, как на основе качественной составляющей так и количественной, таким образом работа ЭВМ заключается, в ее способности выполнять последовательности команд, для реализации этого, используется аппаратные и программные средства, которые являются неотъемлемой частью ЭВМ.</p>
<p>Принципы работы ЭВМ, были сформулированы, американским математиком Джоном фон Нейманом в 1946 г. </p>
<h4>Пять принципов фон Неймана:</h4>
<ol>
    <li>Вся информация кодируется в двоичной форме и разделяется на элементы, называемые словами.<p><i>Почему в нашей 10-ти системе счисления 1 байт — 8 бит?</p></i></li>
    <li>Слова разного назначения, при обращении к ним, различаются не способом кодирования, а необходимостью их использования, т.е. чем чаще используется символ, тем код у него должен быть короче. Компьютерным словом называется любой знак или символ, закодированный минимум 8 битами. <p><i>Что используется чаще цифры или буквы? А какие буквы используются чаще заглавные или прописные? А какие буквы используются чаще английские или русские? А что чаще используется знак $ или @?</i></p></li>
    <li>Слова размещаются в памяти ЭВМ и определятся адресами.<p><i>Какие виды памяти есть у ЭВМ? И что такое кодовая таблица и какие виды ее бывают?</i></p></li>
    <li>Алгоритм представляется в виде последовательности команд, определяющие наименование операции и адрес слова в памяти ЭВМ.<p><i>В каком порядке происходит загрузка компьютера, очередь тестирования при включении?</i></p></li>
    <li>Команды выполняются последовательно, в соответствие из в памяти ЭВМ</li>
</ol>
<h5>Если хотя бы один из принципов не выполняется, то данное устройство нельзя считать вычислительной машиной.</h5>
<h4>Изменения принципов фон Неймана:</h4>
<ol>
    <li>Изменение к первому принципу. Первые ЭВМ использовали слова одинаковой длины -8 бит. Слова стали с переменными длинами, с дополнительным указателем о формате. Переменный формат, стал использоваться как для команд, там и для результатов операции.
        <p><i>Чем отличается .ехе от .bat; mp3 от wal; gif от bmr; dll от sys.</i></p>
    </li>
    <li>Если назначение слов определяется необходимостью, их использования то программа заранее должна знать назначение всех слов, и их адресацию, таким образом, только в пределах отведенных зон памяти, назначение слов определяется необходимостью их использования.
        <p><i>Почему какие-то типы вирусов используются для Windows, а другие для Linux? В какие папки загружается вирусы в Windows и Linux?</i></p>
    </li>
    <li>Искомые слова, как и прежде определяются словами, однако способ адресации стал многообразнее, для удобства организации вычислительного процесса, используется обращение не к одному слову, а к массиву слов при этом должна указывается характеристика массива, в первую очередь его размер и начальный адрес.
        <p><i>При создании новой папки, какой размер и какую информацию она хранит? Какой размер имеет файл, созданный в Excel и какую информацию он хранит, и какую информацию имеет фаqл созданный в Word и какую информацию он хранит?</i></p>
    </li>
    <li>Структура команд стала переменой по длине, в команды стали записывать сведения о способе адресации, в некоторых случаях поле адресов команды, стали занимать константы, которыми необходимо выполнять операции.
        <p><i>Откуда берется сведения о текущей дате, которая работает в программе.</i></p>
    </li>
    <li>Последовательность команд в основном выполняется, однако широко используются процедуры, внутри программных переходов и межпрограммных прерываний.
        <p><i>Что такое система прерываний программ? Что можно прервать на каждом компьютере с помощью мыши, что можно с помощью клавиатуры, а что вообще нельзя прерывать.</i></p>
    </li>
</ol>
<h3 id="history_3">Основные характеристики вычислительных машин</h3>
<h4>Внешние:</h4>
<ul>
    <li>Производительность - время, которое затрачивает ЭВМ на выполнение некоторого объёма работы;</li>
    <li>Быстродействие - среднестатистическое число операций (команд), выполняемых ЭВМ в единицу времени;</li>
    <li>Быстродействие при выполнении операций с плавающей точкой,</li>
    <li>Объем оперативной памяти, </li>
    <li>Количество периферийных устройств.</li>
</ul>
<h4>Внутренние: </h4>
<ul>
    <li>Длина слова процессора - это количество данных, которые процессор может обработать за одну операцию. Слово— это некоторое количество битов, как правило 16, 32 или 64.</li>
    <li>Длина слова оперативной памяти - может не совпадать с машинным словом, являющимся информационной единицей. Так, при длине слова в 32 двоичных разряда слово памяти может иметь длину 16 или 64 бит;</li>
    <li>Наличие буферной (КЭШ) памяти - зона для временного хранения данных;</li>
    <li>Скорость передачи информации в ядро процессорного устройства</li>
</ul>
<h4>Эксплуатационные характеристики: </h4>
<ul>
    <li>Потребляемая мощность - суммарное количество определяет мощность блока питания;</li>
    <li>Габариты;</li>
    <li>Надежность.</li>
</ul>
<h3 id="history_1">Виды информации и способы её представления</h3>
<p>Информацию можно классифицировать разными способами, и разные науки делают это по-разному.</p>
<p>Для информатики самым главным вопросом является то каким образом используются средства вычислительной техники для создания, хранения и обработки информации, поэтому в информатике отдельно рассматривают аналоговую и цифровую информацию.</p>
<p>Человеческий организм так устроен, что воспринимает информацию с помощью органов чувств. Свет, звук тепло – это энергетические сигналы. Вкус и запах – это результат воздействия химических соединений. Все это и есть аналоговая информация.</p>
<p>Если же разным цветам дать номера, а разным звукам- ноты, то аналоговую информацию можно превратить в цифровую.</p>
<p>Музыку, когда мы ее слышим, несет аналоговую информацию, но как только мы ее запишем нотами, так она становиться цифровой. Мы легко различим разницу в одной и той же ноте, если ее исполнить на фортепьяно и скрипке, хотя эти ноты на бумаге выглядят одинаково.</p>
<p>Разница между аналоговой и цифровой информациями прежде всего в том, что аналоговая информация непрерывно, а цифровая –дискретна.</p>
`;

const divArchitectureText = `<h2 id="architecture">Архитектура персонально компьютера</h2>
<h3 id="architecture_1">Общие сведения</h3>
<h3 id="architecture_2">Общее понятие архитектуры</h3>
<p><b>Архитектура ЭВМ</b> – совокупность технических средств и их конфигураций, с помощью который реализована данная ЭВМ.</p>
<p>В понятие Архитектура ПК также входят принципы организации вычислительного процесса и переработки информации, включая внутреннее программное обеспечение, позволяющие обрабатывать машинные команды. Детальный анализ архитектуры предусматривает изучение структурной схемы внутренней организации, и взаимодействие основных функциональных компонентов системы, а также принципы организации вычислительного процесса, систему счисления, информационные форматы, и организацию вычислительного и обменного процесса. </p>
<p>4 поколения архитектур:</p>
<div class="architecture_figure">
    <figure class="figure">
        <img src="img/qZ7ehOoTuVk.jpg" alt="альтернативный текст">
        <figcaption>Фон Неймовская (топология звезда)</figcaption>
    </figure>
    <figure class="figure">
        <img src="img/HXtwn_JaIUc.jpg" alt="альтернативный текст">
        <figcaption>Поколение калькулятора</figcaption>
    </figure>
    <figure class="figure">
        <img src="img/A1OigYufGrQ.jpg" alt="альтернативный текст">
        <figcaption>Поколение Денди</figcaption>
    </figure>
    <figure class="figure">
        <img src="img/aUDctSAlG7A.jpg" alt="альтернативный текст">
        <figcaption>Поколение шины: ШД, ШУ, ША</figcaption>
    </figure>
</div>
<h3 id="architecture_3">Состав и функции основных блоков ВС</h3>
<p>Персональный компьютер с технической точки зрения представляет собой, единую систему состоящую, из набора сменных компонентов, соединенных между собой стандартным интерфейсом.</p>
<p>Компонент – узел или устройство, выполняющий определенную функцию в составе системы.</p>
<p>Интерфейс – стандарт присоединения компонентов к системе, аппаратный интерфейс. В качестве аппаратного интерфейса выступает, разъемы и наборы микросхем, генерирующие стандартные, электрически, оптические, гидравлические, механические и т.д. сигналы в стандартный программный код. </p>
<p>Набор однотипных компонентов с разными функциональными возможностями, включаемых в систему по единому интерфейсу, представляют собой конфигурацию ПК.</p>
<p>На компьютерном рынке сложилось следующее разделение конфигураций ПК:</p>
<ul>
    <li>Рабочая станция;</li>
    <li>Настольный ПК;</li>
    <li>Офисные;</li>
    <li>Мультимедийный компьютер;</li>
    <li>Игровая станция;</li>
    <li>Ноутбук;</li>
    <li>Нетбук.</li>
</ul>
`;

const divCPUText = ` <div class="architecture_3_list">
<h3 id="architecture_3_1">Процессор</h3>
<p><b>Процессор</b> – узел ЭВМ, который предназначен для автоматического выполнения, последовательности арифметических, логических операций управления и ввода/вывода. Он занимает центральное место в структуре ЭВМ и связан практически со всеми устройствами, входящими в состав ЭВМ. </p>
<h4>Описание элементов процессора</h4>
<p><b>Устройство управления</b> - предназначено для организации автоматического решения задач, путем анализа команд действующей программы, а также преобразование управляющей информации, записанной в команды и координации работы всех устройств ЭВМ, участвующих в выполнение команды. </p>
<img class="img_cpu" src="img/eUw1HACrEYg.jpg" alt="">
<p>Устройство управления, реализует функции: </p>
<ol>
    <li>Выработка команды по текущему адресу.</li>
    <li>Выполнение адресных преобразований, в соответствие с указаниями об этом, которые записаны в команде.</li>
    <li>Выборка из памяти операндов по преобразованным адресам</li>
    <li>Загрузка памяти, результатами выполнения операций.</li>
    <li>Управление переходами команд по заданным условиям.</li>
    <li>Управление системой прерывания с запоминанием текущего состояния выполняемых команд.</li>
    <li>Управление возвратом, ранее перерванным программам.</li>
    <li>Управление очередности управления, взаимно прерываемых программ в соответствии с установленными приоритетами и управлением.</li>
    <li>Управление вводом/выводом данных.</li>
    <li>Управление обращением к памяти ЭВМ.</li>
</ol>
<p><b>АЛУ</b> — предназначено для выполнения арифметических и логических операций, над машинными словами. АЛУ реализует целочисленные команды, способные выполнятся за один такт синхронизации, это команды типа: регистр-регистр, регистр-память, вызовы команды, логические операции, логического сложения.</p>
<p><b>Регистр</b> — ячейка процессора, от которой зависят возможности данной модели процессора, с помощью регистра можно складывать 2 числа (двоичная система), а результат записывать в 3 регистр. Разрядность регистра процессора, определяется количеством данных который может обрабатывать процессор. </p>
<p><b>Блок связи с оперативной памятью</b> — внутренний интерфейс процессора, предназначенный для организации обмена информации с оперативной памятью и для защиты участков оперативной памяти по чтению и записи от недозволенных при выполнение конкретных программ обращений.</p>
<p><b>Математический сопроцессор</b> — выполнение операций с плавающей точкой, дробными числами, экспоненциальными и логарифмическими функциями. Аппаратный интерфейс позволяет подключать сопроцессор через предсказателя перехода, не посредственно к выводам центрального процессора.</p>
<p><b>Предсказатель перехода</b> — обеспечивает динамическое предсказание или ветвление программы путём запоминания 256 вероятных переходом и загружает информации в блок декодирования команд.</p>
<p><b>Блок декодирования команд</b> — преобразует двоичный код, поступающий из КЭШ памяти в эл. сигнал определенной величины на одном конкретном выходе. </p>
<p><b>КЭШ память</b>— память небольшого информационного объёма, предназначенная для временного хранения, обрабатываемых промежуточных данных и команд без обращения к оперативной памяти, что ускоряет производительность процессора (Степень интеграции микросхемы, тактовая частота, разрядность) в целом. </p>
<h4>Основными характеристиками процессора являются:</h4>
<ul>
    <li>Тактовая частота;</li>
    <li>Скорость выполнения команд;</li>
    <li>Разрядность шин данных и адреса</li>
</ul>
</div>`;

const divCashText = `<div class="architecture_3_list">
<h3 id="architecture_3_2">Назначение КЭШ памяти и сопроцессора</h3>
<p>Для ускорения работы ПК и были разработаны математические сопроцессоры, которые предназначались для выполнения операций с плавающей точкой, дробными числами, экспоненциальными и логарифмическими функциями. </p>
<p>Аппаратный интерфейс позволяет подключать сопроцессор непосредственно к выводам центрального процессора. Если программе требовалось использовать математический сопроцессор, то центральный процессор передавал данные сопроцессору автоматически, и шина данных при этом переходит в распоряжение сопроцессора.</p>
<h4>КЭШ память</h4>
<p>Напрямую влияет на скорость вычислений и помогает процессору работать наиболее равномерно. КЭШ память состоит из двух уровней:</p>
<p>Первый уровень состоит из двух банков, одинаковых по объему от 8 до 32 килобайт. </p>
<p>Первый банк предназначен для хранения команд.</p>
<p>Второй банк — хранение адресов оперативной памяти и адресов где хранятся промежуточные вычисления КЭШа второго уровня. </p>
<p>Все запросы центральный процессор одновременно адресует к КЭШ памяти и к оперативной памяти. Если данные совпадают, то процессор берет их из КЭШа. В этом случае КЭШ память выполняет роль закладки. КЭШ память может работать в двух режимах: в режиме отложенной памяти — процессор записывает все промежуточные вычисления, в КЭШ второго уровня, а итоговый результат выводит в оперативную память.</p>
<p>Метод отложенной записи считается быстрым, но не надёжным, так как в случае сбоев в системе. Промежуточные результаты могут быть потеряны. Для повышения надежности хранения данных применяют непосредственную или сквозную запись (данные одновременно записываются в КЭШ и оперативную память, но берутся только из КЭШа, а в случаях сбоя в системе обращаются к оперативной памяти). </p>
<p>Организации КЭШ памяти, называется четырех страничным набором ассоциативного КЭШа что предусматривает разделение кэш памяти на 4 блока, каждый блог состоит из 128 или 256 строк по 16 байт в каждой строке. </p>
<p>В каждом блоке хранится копия, отдельных фрагментов оперативной памяти. КЭШ память процессора является не блокируемой, что позволяет уменьшать задержку при обработке данных процессором и дает возможность продолжать выполнение программы в конвейерном режиме.</p>
<p>Все свои запросы ЦП адресует одновременно оперативной памяти и КЭШу. Если адреса обращения в оперативную память и КЭШ идентичны, то констатируется попадание в КЭШ. В этом случае данные или команды считываются из более быстрой памяти, что повышает производительность ПК.</p>
<p>Если Кэш не располагает информацией по искомому адресу, процессор обращается за ней к оперативной памяти. В этом случае скорость обмена данными замедляется. Т.е. чтобы процессор реже общался к оперативной памяти внутри его создана КЭШ –память.</p>
<ol>
    <li>Когда процессор обращается в оперативную память за какими-то данными, он за одно записывает их в Кэш. Если эти данные ему потребуются еще раз то он возьмет их уже оттуда. </li>
    <li>Очень часто эти данные действительно пригождаются, и работа процессора происходит быстрее. Тогда процессор берет их не из оперативной памяти, а из собственного Кэша. Хранение часто используемых данных в сверхоперативной Кэш- памяти называется кэшированием. </li>
    <li>Когда процессор записывает данные в память, он тоже может использовать Кэш. Иногда он не спешит делать запись, а накапливает результаты расчетов в Кэше, чтобы потом записать все данные одним приемом. Этот метод называется отложенной записью  </li>
    <li>У отложенной записи есть важный недостаток – она не безопасна. Любой сбой может привести к потере данных. В ответственных случаях применяют непосредственную запись, когда данные записываются в оперативную память одновременно с записью в Кэш. Это хоть и медленнее, но надежнее.</li>
</ol>
</div>`;

const divBusText = `<div class="architecture_3_list">
<h3 id="architecture_3_3">Системные шины</h3>
<p>Компьютер состоит из множества отдельных устройств. Для взаимодействия между компонентами (то есть компоновки работоспособности компьютерной системы), их необходимо связать физическими линиями (проводниками), которые обычно называют шинами. Формат сигналов, передаваемых по шине, задан соответствующим протоколом. Шины предназначены для скоростной передачи данных, сигналов управления и питания между процессором и остальными компонентами систем. </p>
<p>Хост-шина обозначается FSB и представляет собой системную магистраль связывающую центральный процессор с северным мостом. </p>
<h4>На сегодняшний день используют 3 вида системных шин:</h4>
<img src="img/_7GVEBoYMi4.jpg" alt="">
<p><b>FSB (Front Side Bus)</b> – параллельно-системная шина, которая является магистральным каналом и состоит из: шины данных, шины адреса, служебной шины (шина управления), шины питания. Такая конфигурация шин называется классической, данная конфигурация разработана компанией Intel и использовалась на материнских платах процессора 486 Pentium 1,2,3,4. </p>
<p><u>Шина данных</u> в значительной мере определяет производительность процессора и характеризуется разрядностью. Модели Pentium используют 32 или 64 разряда. Количество разрядов, соответствует количеству линий. </p>
<p><u>Шина адреса</u> - описывает номер ячеек памяти, в которых хранятся данные. Чем выше разрядность адресной шины, тем больше число ячеек памяти, тем больше может быть память вычислительной системы. На сегодняшний день шина адреса на Pentium 4 является 36 разрядной, что позволяет использовать адресуемую память объемом до 64 Гб. </p>
<p><u>Шина сигнала</u> используется процессором для передачи команд, запросов, сигналов тактирования, синхронизации и управления напряжением питания. Шина управления использует 124 линии. </p>
<p>Остальные линии в системной магистрали используются для подачи питания и в зависимости от типа процессора, могут достигать 248 линий. </p>
<i>У шины FSB существует 3 модели:</i>
<ol>
    <li>GTL – групповая трансфертная логическая шина, данная шина предусматривает синхронный обмен данными за один такт по поперечному импульсу.</li>
    <li>AGTL – асинхронная, предусматривает возможность подключение двух микропроцессором или двух ядер при этом быстродействие делится пополам. PAT – снижает задержки при доступе памяти на 15-20%.</li>
    <li>QPB – особенность данного варианта шины является то, что команды передаются с одиночной скоростью, адреса в удвоенную скоростью, а данные с 4х скоростью. Что позволило использовать технологию DDR </li>
</ol>
<p><b>HT (HyperTransport)</b> – двунаправленная последовательно-параллельная полнодуплексная системная шина типа точка-точка, использующая первые два уровня модели открытых информационных систем (физический и канальный). </p>
<p>На физическом уровне используется соединение типа точка-точка. На основе низковольтной дифференциальной сигнальной паре. Одно направление используется на прием с низким уровнем напряжения -0,3 В, другое направление на передачу с высоким уровнем напряжением+ 1,7 В и полным волновым сопротивлением в обоих направлениях 100 Ом. Каждое направление может быть представлено в виде 2,4,8,16,32 линий в каждом направлении. Причем шина направления не обязательно должна быть одинаковой. Допускается использование двух линий на прием и 32 линий на передачу. Данные передаваемы по шине HT, синхронизируется тактовым импульсам по переднему и заднему фронту, т.е. за один такт данные передаются дважды, прием и передача данных тактируется независимо друг от друга, причем если ширина направления превышает 8 бит, то на каждые последующие 8 бит создается дополнительное тактирующие линии. Для шины HT предусмотрена линия питания, которая использует напряжение +2.5 В, все устройства, подключаемые к шине, должны питаться от внешнего источника, чтобы не перегружать шины.</p>
<p>На логическом уровне данные передаются в виде пакетов, пакеты делятся на служебные и пакеты данных. Пакет шины HT – кусок данных, записанных в определённом формате. При передаче данных сначала передаётся служебный пакет (32 битный), при этом размер пакета не зависит от физ. ширины шины. В служебном пакете, первые 8 бит (слово) всегда управляющие, последующие 32 бита сцеплены с управляющим словом, что позволяет создать 40 битный адрес. Все последующие пакеты тоже 32 битные, но являются данными. Для различия пакетов между собой используется линия STL. Если в момент передачи данных необходимо передать системный пакет, то передача данных прервётся на полуслове и после прохождения системного пакета возобновится вновь. Такой вариант целесообразно использовать в режиме реального времени. Реализация шины HT предусматривает использование концепций универсальности и масштабируемости. </p>
<p>Универсальность заключается в том, что шина HT позволяет связывать между собой не только процессоры или их ядра, но и другие компоненты материнской платы. </p>
<p>Масштабируемость предусматривает возможность наращивать пропускную способность в зависимости от конкретных нужд пользователей.</p>
<p>Серверный вариант предусматривает возможность объединения процессоров между собой по гибридной технологии NUMA. Если ресурсов 1-го процессора для обработки данных не хватает, то задействуется ресурсы другого процессора. Если же не хватает объёма локальной оперативной памяти, то может быть задействована внешняя оперативная память.</p>
<div class="architecture_3_3_HT">
    <img src="img/eF6erSy5NI4.jpg" alt="">
    <img src="img/i_X4gudsU20.jpg" alt="">
    <img src="img/-2A9yc2sXys.jpg" alt="">
</div>
<p><b>QPI (QuickPath Interconnect)</b> – быстрый путь соединения, системная шина, разработанная компанией Intel для соединения процессоров между собой. </p>
<p>Данная шина является последовательной двунаправленной полнодуплексной кэш-когерентной типа точка-точка, построенная на основе первых 5 уровней модели OSI.</p>
<ol>
    <li>Физический уровень – описывает физическую разводку соединений, включая приёмник и передатчик, шириной 20 бит в каждом направлении.</li>
    <li>Канальный уровень – предусматривает отправку 80-битного пакеты по 20-ти полосам в каждом направлении, при этом 72 бита представляют собой сегменты с данными, а 8 бит – являются контрольной суммой, которые используются для определения ошибок.</li>
    <li>Уровень маршрутизации (сетевой) – отвечает за отправку 72-битного сегмента данных, где 64 бита занимают данные, а 8 бит – заголовок, указывающий цель и тип сообщения.</li>
    <li>Транспортный уровень – отвечает за обработку ошибок, выявленных при передаче и запрашивает повторную передачу при обнаружении этих ошибок.</li>
    <li>Уровень протокола (сеансовый) – отвечает за когерентность кэшей, т.е. за то, как программы более высокого уровня будут получать доступ к механизму передачи данных из кэш-памяти, минуя оперативную память.</li>
</ol>
<img class="simple_img" src="img/xprdn4q-1wE.jpg" alt="">
<p>На самом деле, QuickPath Interconnect подвержена более значительной перегрузке, чем Hypertransport; для отправки 64 бит данных QuickPath Interconnect требует 16 бит перегрузки, в то время как HyperTransport требует всего 8 и 12 бит для чтения и записи соответственно.</p>
<p><b>DMI </b>последовательная шина типа точка-точка, используемая для связи процессора Intel с чипсетом и для связи южного моста чипсета с северным</p>
<p><b>DMI (Direct Media Interface)</b> — специализированная шина, используемая в обычных ПК и предназначенная для связи северного и южного мостов чипсетов фирмы Intel, например, P45 и ICH10. В серверах может применяться другая шина, ESI (Enterprise Southbridge Interface), причём по крайней мере в некоторых южных мостах, включая ICH10, возможно переключение между DMI и ESI (оно выполняется аппаратно путём соответствующей распайки микросхемы).</p>
<p>Шина DMI имеет два виртуальных канала передачи информации, обозначаемых VC0 и VC1, причём VC1 имеет более высокий приоритет. Благодаря этому обеспечивается выполнение истинно изохронных (т.е. привязанных ко времени) передач, необходимых, например, для обмена мультимедийной информацией в реальном времени: они выполняются по каналу VC1, и только когда таких передач нет, производится обмен данными по каналу VC0 с менее приоритетными устройствами. Канал VC0 всегда разрешён; канал VC1 должен быть сконфигурирован программно на обоих концах шины DMI, т.е. в северном и южном мостах.</p>
<p>Базовая функциональность шины DMI полностью прозрачна для ПО, поэтому существующие операционные системы могут работать с устройствами, косвенно подключаемыми через эту шину, как будто этой шины не существует. Расширенные функции, например, обеспечение изохронных транзакций через канал VC1, требует соответствующей программной настройки DMI.</p>
<p>Версия 1.0, поддерживает скорость передачи данных – 10 Гб/с, версия 2.0 (две линии в одной) – 20 Гб/с.</p>
</div>
`;

const divMemoryText = `<div class="architecture_3_list">
<h3 id="architecture_3_4">Память</h3>
<p>Устройство памяти предназначено для последовательной записи, хранения и последовательной выдачи массива данных. Запись данных в устройство памяти, называется обращение к оперативной памяти, </p>
<p>Основными характеристиками памяти:</p>
<ul>
    <li>информационная ёмкость – это количество слов, которое могут хранится в памяти и выражается в битах или байтах. </li>
    <li>быстродействие – это продолжительность обращения, к массиву данных. Обращение к массиву данных вычисляется по формуле </li>
</ul>
<p>t = время поиска + время стирания + время записи. </p>
<p>Классификацию можно представить в виде следующей схемы</p>
<p><b>Буферная память</b> – это тип памяти используется для повышения производительности медленных устройств. Путем промежуточного запоминания данных в буферной памяти. Часто буферная память имеет жёсткий диск, CD-приводы, в качестве буферной памяти выступает память видео карты, звуковой карты, сетевой карты.</p>
<p><b>Служебное запоминающие устройство</b> – используется для управления многоуровневой памяти. В служебной памяти хранятся программы для выполнения программы для выполнения команд процессора. </p>
<p><b>Вспомогательное запоминающие устройство</b> – представляет различные таблицы, используемы для быстрого поиска информации. Считается память типа TLB. Специфика предусматривает не доступность ее к командам процессора. </p>
<p><b>Оперативная память</b> – основное запоминающие устройство ЭВМ.</p>
<p><b>Дополнительная память</b> иногда называется внешней или программной памяти используется как вспомогательная память для хранения текущих данных.</p>
<figure class="figure smaller_middle">
    <img class="architecture_3_4_memory" src="img/OKl2baFyQ9s.jpg" alt="r">
    <figcaption>
        <p>Структура запоминающих устройств</p>
    </figcaption>
</figure>
<p>На логическом уровне любая ячейка памяти, представляет собой массив данных, который организован в виде строк и столбцов, данный массив записывается блоками, размер блока определяется разрядностью памяти, блоки группируются построчно первые бит массива является адресным. </p>
<p>Для приведения записи или чтения из ячейки данных, необходимо определить адрес первой ячейки массива. Для этого сначала активируется одна из строк массива, а затем столбец массива с данными хранящимся в памяти, что бы последующие операции не коснулись другую микросхему, подается сигнал C (выбор чипа) определившись с адресом массива данных. Система подает стробирующий сигнал RW, если подается единичный сигнал, то чтение, если нулевой, то запись. В соответствии с этим сигналом на вход D итог, а с входа D0 чтение данных.</p>
<h4></h4>
</div>`;

const divRAMText = ` <div class="architecture_3_list">
<h3 id="architecture_3_5">Оперативная память</h3>
<h4 class="memory_header">SRAM</h4>
<p>SRAM – статическая память с произвольной выработкой, это полупроводниковый тип памяти в котором хранящиеся данные не перемещаются относительно информации.</p>
<p>Статическая память — это тип памяти, в котором значение бита информация хранится в ячейке определяющаяся наличием или отсутствием заряда на миниатюрном конденсаторе (управляемом транзисторами).</p>
<p>В статической памяти применяются специальные элементы — триггеры, реализованные на 4-6 транзисторах. Именно триггер является ячейкой статической памяти.</p>
<p>Ячейки памяти SRAM реализованы на цифровых триггерах применяется при кэширование оперативной памяти. Хранение информации в BIOS и там, где предъявляется большие требования к быстродействию, но невысокие требования к объему. </p>
<p>Достоинства: низкое энергопотребление, высокое быстродействие. </p>
<p>Недостатки: малый объем, высокая стоимость хранения 1 бита данных, сложность технической реализации. Архитектура ячеек SRAM имеет следующий вид.</p>
<b>Принцип работы </b>
<p>SRAM начинается с момента, когда в регистре адреса строки обнаружены изменении данных. После чего, сигнал подается на дешифратор строки. Дешифратор преобразует двоичный код регистра строки в один конкретный электрический сигнал, заданной величины на одном конкретном выходе. Тем самым активирует строку памяти. Блок таймингов производит задержку активации столбца на время которое необходимо адресному сигналу строки. Прошел через все чипсеты. После этого происходит активация столбца, таким образом выбирается первая ячейка массива, в которую будет производится запись, или из которой будет считываются данные.</p>
<img class="simple_img" src="img/ImCKaIbrhUw.jpg" alt="">
<p>Определение команды считывания или записи, а также выбор чипа с котором будут производится операции, осуществляется контроллером ввода-вывода.</p>
<p>Вход WE разрешение на запись данных.</p>
<p>Вход OE разрешение на чтение данных. </p>
<p>Вход CE определяет чип, с которым будут производится действия. </p>
<p>Вход PD переводит микросхему памяти в спящий режим.</p>
<p>Активация котроллера ввода вывода, обеспечивает работу буфера ввода/вывода в режиме чтения или записи. Блок POWER DOWN обеспечивает режим экономии энергии, путём перехода микросхемы из активного состояния в спящее. В активном состоянии вся микросхема SRAM обеспечивается полным рабочим напряжением.  В спящем режиме питающие напряжение снижается. </p>
<p>В некоторых системах режим внутреннего тайминга. Остается работоспособной даже при выключенном питании. Микросхемы SRAM имеют следующую маркировку, которая заносится сверху. </p>
<h4 class="memory_header_mini">НАЗНАЧЕНИЕ SRAM</h4>
<p>Статическая память с произвольным доступом (SRAM, static random access memory) — полупроводниковая оперативная память, в которой каждый двоичный или троичный разряд хранится в схеме с положительной обратной связью, позволяющей поддерживать состояние без регенерации, необходимой в динамической памяти (DRAM). Тем не менее сохранять данные без перезаписи SRAM может, только пока есть питание, то есть SRAM остается энергозависимым типом памяти. Произвольный доступ (RAM — random access memory) — возможность выбирать для записи/чтения любой из битов (тритов) (чаще байтов (трайтов), зависит от особенностей конструкции), в отличие от памяти с последовательным доступом (SAM, англ. sequential access memory).</p>
<h4 class="memory_header_mini">СТРУКТУРА SRAM</h4>
<h4 class="memory_header_mini">Устройство ячейки статической памяти</h4>
<figure class="figure smaller">
    <img src="img/VqBYMpJydBI.jpg" alt="">
    <figcaption>
        <p> На рисунке 1 приведена упрощенная схема одного из способов организации ячейки статической памяти.</p>
    </figcaption>
</figure>
<p>Она состоит из одного триггера и трех транзисторов, выполняющих роль ключей, открывающих и закрывающих доступ к ячейке памяти. Транзисторы VT1 и VT2 используются для разрешения и запрета записи в ячейку, а транзистор VT3 – для разрешения и запрета чтения.</p>
<p>Для записи данных необходимо подать напряжение в линию строки, после чего транзисторы VT1, VT2 и VT3 откроются. Затем для записи единицы необходимо подать напряжение, соответствующее логической единице, на линию D и напряжение, соответствующее логическому нулю, на линию D&#8254. Для переключения триггера в состояние хранения нуля необходимо подать напряжение, соответствующее логическому нулю, на линию D и напряжение, соответствующее логической единице, на линию D&#8254.</p>
<p>В установленном состоянии триггер будет оставаться даже после снятия напряжения с линии строки и с линий D и D&#8254 до тех пор, пока на него будет подаваться питание Uп.</p>
<p>Для считывания данных необходимо на входы D и D&#8254 подать напряжение, соответствующее логическому нулю, так как подача двух логических нулей на входы триггера не изменит его состояния, а затем подать напряжение на строку. В результате, транзистор VT3 откроется, и ток с триггера по линии Q пройдет в устройство считывания. Одновременно с транзистором VT3 откроются транзисторы VT1 и VT2. Но так как напряжение на линиях D и D&#8254 соответствует логическому нулю, то оно не повлияет на состояние транзистора.</p>
<p>Считывание данных с ячейки статической памяти, в отличие от чтения с ячейки динамической памяти, не приводит к потере сохраненного бита данных, поэтому перезапись данных в ячейку статической памяти не требуется.</p>
<h4 class="memory_header_mini">Устройство микросхемы статической памяти</h4>
<figure class="figure smaller">
    <img src="img/QbF8puE8mJU.jpg" alt="">
    <figcaption>
        <p>Рисунок 2.  Упрощенная структурная схема статической памяти.</p>
    </figcaption>
</figure>
<p>Рассмотрим рисунок 2. запись в ячейку М11. В контроллер шины памяти от контроллера памяти, встроенного в северный мост материнской платы или в процессор, приходит адрес ячейки памяти и данные для записи. Адрес ячейки преобразуется на две составляющие – номер строки и номер столбца. Номер строки передается в «Дешифратор адреса строки», откуда на нужную строку подается напряжение.</p>
<p>Так как мы рассматриваем запись в ячейку М11, то напряжение с дешифратора адреса строки подается на первую строку. В результате, транзисторы VT1, VT2 и VT3 открываются. Аналогичные транзисторы других ячеек памяти, располагающихся в этой строке, также открываются.</p>
<p>Через транзистор VT3 первой ячейки и аналогичные транзисторы других ячеек памяти первой строки пойдет ток, соответствующий состоянию триггеров этих ячеек, в «Буфер данных». Однако «Буфер данных» получаемую информацию будет игнорировать, так как у него нет сигнала от «Блока управления» на сохранение считываемых данных.</p>
<p>Параллельно с подачей напряжения на строку матрицы памяти с «Блока работы с данными» будет выдано напряжение, соответствующее записываемым данным, в «Блоки записи 1 - m», а с «Блока дешифровки адреса столбца» на соответствующие столбцы будет выдано разрешение (напряжение, соответствующее логической единице) на запись данных.</p>
<p>Блоки записи используются для запрета выдачи тока в линии D и  при чтении данных и преобразования из входящих сигналов данных их инвертируемых сигналов для переключения состояния триггеров, в которые необходимо сохранить данные.</p>
<p>В нашем случае, запись проводится в ячейку М11, и записывается единица. Соответственно, с «Блока работы с данными» будет выдана логическая единица в «Блок записи 1», и с «Блока дешифровки адреса столбца» будет выдана логическая единица в «Блок записи 1».</p>
<p>Рассмотрим работу «Блока записи 1» при таких входных сигналах. И так, на входе элемента D.D3 будет логическая единица, а на выходе – логический ноль, так как элемент D.D3 – инвертер (логический элемент «НЕ»). Соответственно, на входах элемента D.D4 (логический элемент «И») будут: логический ноль и логическая единица. В результате, на выходе этого элемента будет логический ноль.</p>
<p>На входах элемента D.D5 (логический элемент «И») будут две логические единицы, в результате, на выходе этого элемента будет логический ноль.</p>
<p>Следовательно, на выходе D1 «Блока записи 1» будет напряжение, соответствующее логическому нулю, а на выходе 1 будет напряжение, соответствующее логической единице. Эти напряжения будут поданы на все ячейки памяти первого столбца. Однако у всех ячеек, кроме первой, транзисторы, разрешающие запись, закрыты, а, следовательно, подаваемое напряжение попадет только на триггер первой ячейки и переведет его в состояние хранения единицы.</p>
<p>После изменения состояния триггера первой ячейки напряжение с первой строки снимается, и транзисторы VT1, VT2 и VT3 закрываются, запрещая запись и чтение из ячейки.</p>
<p>При записи нуля в ячейку памяти все происходит по той же схеме, только с «Блока работы с данными» в «Блок записи 1» будет подано напряжение, соответствующее логическому нулю. Это значит, что на выходе D1 «Блока записи 1» будет напряжение, соответствующее логической единице, а на выходе 1 будет напряжение, соответствующее логическому нулю. Эти значения напряжений переведут триггер первой ячейки памяти в состояние хранения нуля.</p>
<p>В установленном состоянии триггер первой ячейки останется, пока на него будет подаваться питание Uп.</p>
<p>Чтение записи происходит еще проще. От контроллера памяти приходит адрес ячеек памяти, с которых требуется считать данные, и команда на чтение.</p>
<p>В результате, адрес преобразуется в номер строки, и на соответствующую строку будет подано напряжение, которое откроет транзисторы разрешения/запрета чтения/записи.</p>
<p>Рассмотрим случай, когда данные считываются из первой ячейки. В этом случае напряжение с «Дешифратора адреса строки» будет подано в первую строку, что приведет к открытию транзисторов VT1, VT2 и VT3 ячейки М11 и всех остальных ячеек первой строки. Ток с триггера первой ячейки, через транзистор VT1, беспрепятственно пройдет в «Буфер данных». То же самое произойдет с остальными ячейками первой строки. Считанные с ячеек памяти первой строки данные сохранятся в «Буфере данных».</p>
<p>После того, как информация в «Буфере данных» будет сохранена, «Дешифратор адреса столбцов» выдаст номера столбцов, данные с которых необходимо считать, в «Буфер данных». Соответствующие данные будут переданы из микросхемы памяти в контроллер памяти, располагающийся в материнской плате или непосредственно в процессоре.</p>
<p>Для того чтобы при чтении данных не происходила запись в эти же ячейки, ведь транзисторы, разрешающие запись, открыты, блоки записи выдают в линии D и  всех столбцов матрицы памяти напряжение, соответствующее логическому нулю. Это происходит из-за того, что с блока дешифровки адреса столбцов выдается напряжение, соответствующее логическому нулю на все «Блоки записи».</p>
<p>Работа статической памяти очень похожа на работу динамической памяти, однако процесс записи и чтения гораздо быстрее, так как не тратится время на заряд и разряд конденсаторов и не требуется регенерация ячеек. Однако необходимо обратить внимание, что рассмотренная нами схема сильно упрощена, и на практике используют гораздо более сложные механизмы записи и чтения из памяти, повышающие надежность и скорость работы статической памяти. Однако описанный выше принцип работы позволяет понять основы функционирования статической памяти, ее недостатки и преимущества.</p>
<p>SRAM различается по принципу работы.</p>
<p>Существует три типа:</p>
<ol>
    <li>
        <p>Async SRAM (Asynchronous Static Random Access Memory) — асинхронная статическая память с произвольным порядком выборки;</p>
    </li>
    <li>
        <p>SyncBurst SRAM (Synchronous Burst Random Access Memory) – синхронная пакетная статическая память с произвольным порядком выборки;</p>
    </li>
    <li>
        <p>PipBurst SRAM (Pipelined Burst Random Access Memory) – конвейерная пакетная статическая память с произвольным порядком выборки.</p>
    </li>
</ol>
<p>Async SRAM – это устаревший тип памяти, асинхронный интерфейс которой схож с интерфейсом DRAM и включает в себя шины адреса, данных и управления.</p>
<p>SyncBurst SRAM – этот тип памяти синхронизирован с системной шиной и лучше всего подходит для выполнения пакетных операций. Ну а интерфейс PipBurst SRAM схож с интерфейсом SyncBurst SRAM, но позволяет получать данные без тактов ожидания.</p>
<h4 class="memory_header_mini">Маркеровка SRAM</h4>
<p>Микросхемы памяти выпускаются в самых разнообразных корпусах. Довольно длительное время наиболее популярными корпусами для статической памяти являлись DIP-корпуса (Dual In-line Package), у которых выводы расположены в два ряда по бокам корпуса. Количество выводов (ножек) у самых первых микросхем было 16, но в дальнейшем увеличилось до 32, для специальных случаев используются корпуса и с 8 ножками. Конструкция DIP-корпуса позволяла как припаивать микросхему на плату, так и вставлять ее кроватку.</p>
<p>Для маркировки микросхем на верхней их стороне краской всегда наносится несколько групп знаков, содержащих информацию о производителе, типе микросхемы, а также о дате выпуска. Хоть и существует ряд стандартов на маркировку микросхем, но все же каждая фирма применяет собственный стиль указания типа микросхемы, а в ряде случаев одновременно указывается  международное  и фирменное обозначение.</p>
<p>На корпусе микросхем почти всегда присутствует группа из 4 цифр, обозначающих дату выпуска данной партии изделий. Первые две цифры в группе обозначают год, а две последние – порядковый номер недели. Иногда используется другой принцип маркировки года выпуска, или его не указывают вообще.</p>
<figure class="figure smaller_middle">
    <img src="img/KORw9uAPbPc.jpg" alt="">
    <figcaption>
        <p>Примеры маркировки микросхем памяти.</p>
    </figcaption>
</figure>
<h4 class="memory_header_mini">Достоинства и недостатки SRAM</h4>
<p>Достоинства:</p>
<ul>
    <li>
        <p>Быстрый доступ. SRAM — это действительно память произвольного доступа, доступ к любой ячейке памяти в любой момент занимает одно и то же время.</p>
    </li>
    <li>
        <p>Простая схемотехника — SRAM не требуются сложные контроллеры</p>
        <img class="simple_img" src="img/9SHVzjEN-HM.jpg" alt="">
    </li>
    <li>
        <p>Возможны очень низкие частоты синхронизации, вплоть до полной остановки синхроимпульсов.</p>
    </li>
</ul>
<p>Недостатки:</p>
<ul>
    <li>
        <p>Невысокая плотность записи (шесть-восемь элементов на бит, вместо двух у DRAM).</p>
    </li>
    <li>
        <p>Дороговизна килобайта памяти.</p>
    </li>
    <li>
        <p>Непредсказуемое (произвольное) содержимое памяти после включения питания.</p>
    </li>
</ul>
<h4 class="memory_header">DRAM</h4>
<p>Динамическая память представляет собой, полупроводниковую транзисторную память, где на логическом уровне, одно транзисторная ячейка памяти представляет собой конденсатор, которою требуется периодически перезаряжать, для сохранения данных в памяти, процесс подзарядки ячеек памяти называется регенерацией. Данный тип памяти используется как оперативная память компьютера, основным достоинством которой является низкая цена за 1 бит хранения информацией и большой объём памяти. </p>
<p>Недостатками является большое энергопотребление, низкая скорость чтения и записи, необходимость специального контроллера на материнской плате.</p>
<figure class="figure smaller_middle">
    <img src="img/MDHs_A2aWBQ.jpg" alt="">
    <figcaption>
        <p>Архитектурно массив ячеек динамической памяти имеет следующий вид:</p>
    </figcaption>
</figure>
<p>Для активации массива ячеек памяти, в буфер адреса строки подается код, который с помощью декодера активирует только одну строку массива, затем через определённое задержку во времени которая создается с помощью временного контроллера 1, в буфер адреса столбца подаётся код, который декодером столбца активирует первую ячейку массива соответствующему разряду памяти. </p>
<p>Согласование работы буфера и адреса строки и столбца осуществляется стробирующим сигналом RAS, который подается на блок временной задержки. Запись и чтение данных в памяти типа DRAM, может проводится одновременно, через буфер ввода и вывода. Сигнал W – разрешение на запись, ОЕ – чтение, сигнал CAS – генерирует управляющие сигналы, обеспечивающая мультиплексированном режиме. Этим же сигналом управляется и активация ячеек памяти. Контроллер обновления и счётчик обновления, а также блок разрешения записи чтения отвечают за регенерацию.</p>
<h4 class="memory_header">PRAM</h4>
<p>PRAM это память с произвольным доступом и фазопеременными элементами. </p>
<p>Данный тип памяти является альтернативным вариантом энергонезависимой памяти следующего поколения. Память реализуется на транзисторах. Принцип работы, которых, определяется резистором. </p>
<p>В качестве химических элементов резисторов используется материал которой называется халькогенидо. Это полупроводниковое соединение способно переходить из аморфного состояния в кристаллическое при подаче на него электрического сигнала определенной величины. Особенностью данного элемента является то, что оно способно сохранять как аморфное, так и закристаллизованной состояние очень долгое время. В аморфном состоянии элемент оказывает высокое сопротивление т.е. ключ разомкнут и состояние Reset. В закристаллизованном состоянии осуществляется высокая проводимость и состояние Set. Для перевода из одного состояния в другое, на ячейку необходимо подавать определённое напряжение при этом импульс должен быть настолько коротким, чтобы он мог расплавить активную часть элемента не затронув остальные, данные на таком типе памяти могут хранится в течении 10 лет при температуре 110 градусов. </p>
<figure class="figure smaller">
    <img src="img/6HdYOepqIg4.jpg" alt="">
    <figcaption>
        <p>Ячейка памяти PRAM на логическом уровне может быть представлена как: </p>
    </figcaption>
</figure>
<p>Es – источник питания </p>
<p>Rs – сопротивление источника питания </p>
<p>Rc – cопротивление закристаллизованной области, является статическим и никогда не изменяется </p>
<p>Rv – сопротивление активной области, в котором осуществляется перезапись информации путём фазового изменения </p>
<p>Rh – сопротивление нагревателя </p>
<p>Ro – сопротивление токопроводников</p>
<p>Все ячейки памяти данного типа объединяются в массив размером 2048 строк и 2048 столбцов.</p>
<figure class="figure smaller_middle">
    <img src="img/0j5Mi3wOK3g.jpg" alt="">
    <figcaption>
        <p>Архитектурная схема ячеек памяти PRAM имеет следующий вид:</p>
    </figcaption>
</figure>
<h4 class="memory_header_mini">Принцип работы PRAM</h4>
<p>Для считывания данных используется напряжение 400 мВ. </p>
<p>Для записи «1» должно подаваться напряжение 1,5 В. </p>
<p>Для записи «0» - 2 В.</p>
<p>Контроль этих напряжений осуществляется управляющим блоком ОС. Транзисторы управляющего блока имеют пороговое напряжение 350 мВ. Транзисторы заряжают все шины после любых операций чтения и записи таким образом, чтобы не допускать ложных программируемых напряжений на параллельных невыбранных ячейках во время последующих операций. Т.к. необходимые программируемые напряжения должны быть выше напряжения источника питания (1,8 Вольт) в схему встраиваются два генератора подкачки.</p>
<p>Генераторы подкачки обеспечивают, питающие напряжение для блока SET и RESET. А также дешифратора строчной шины. Генератор подкачки по «Y» также обеспечивает программированную мощность при переключении столбцов методом смещения выбранной каскадной шины. </p>
<h4 class="memory_header">MRAM</h4>
<p>Магнитно-резистивная память, особенность которой является то что она хранит данные не помощью эл. Зарядов а с помощь магнитных моментов. Тем самым не изменяя состояние материалов, это память является энергонезависимой с произвольным доступом т.е. память способна сохранять инфу достаточно длительное время без дополнительного питания. </p>
<img class="simple_img" src="img/ah3BmcDiJe0.jpg" alt="">
<p>Технологии хранения информации на MRAM заключается в том, что в ячейки памяти содержатся молекулы платины и кобальта между двумя магнито-проводящими слоями. Запись и чтение данных происходит путем изменяя магнитного поля в управляющих слоях, т.е. для хранения бита информации используется не электрический заря, а магнитное состояние ячейки памяти. Между платиной и кобальтом используется магнитно-тунельный переход в виде диалектического слоя магнито алюминия. Нижний слой называется основным или фиксированным его вектор не изменяется. Верхний магнитный слой называется свободным с помощью подачи на него эл.тока направление вектора можно менять. Если направление векторов, фиксированного и свободного слоя совпадают, то это запись 1, если нет, то запись 0.</p>
<p>Реализация данного типа памяти было осуществлено с помощью микросхемы MR2A16A.</p>
<h4 class="memory_header_mini">Принцип работы MRAM</h4>
<p>Конфигурация микросхемы МRAM и принцип ее работы и соответствует принципу работы  SRAM ёмкость составляет 4 мегабита с организацией 256 столбцов и 16 строк. Управление осуществляется стандартными входами, CE – выбор чипа, WE – запись, OE – чтение. В зависимости от состояния входов данные могут быть записаны или считаны 8 или 16 битном формате. Время цикла записи чтения и стирания составляет 35 наносекунд, время доступа к данным 6 наносекунд, диапазон рабочих напряжений от 3 до 3.6 вольт.</p>
<p>В микросхему встроена система мониторинга питания, которая предотвращает запись в ячейках памяти при снижении уровня питающего напряжения, более чем на 0.5 вольта относительно рабочего напряжения.</p>
<p>Достоинством памяти является способность хранить информацию, более 10 лет, кол-во перезаписи данных может составлять более 10^16 циклов. Схема может работать на частоте 4 МГц при температуре 90 С, 28 МГц при температуре 70 С</p>
<p>Микросхемы MR2A16A применяются в ПК, принтера, факсах, сканерах; сотовых телефонах, фотоаппаратах, видеокамерах в качестве оперативной памяти, RAID-массива, эл. счётчиков, газовых счётчиках, авиатехнике, транспортной техники, РЖД, в качестве черных ящиков.</p>
<h3 id="architecture_3_5">Оперативная память</h3>
<p>Основная память ПК, предназначенная для хранения текущих данных, выполняемых программ, а также для хранения отдельных копий модулей ОС. </p>
<p>Основными характеристиками оперативной памяти является:</p>
<ul>
    <li>Тип памяти (статическая и динамическая)</li>
    <li>Объём</li>
    <li>Структура (Кол-во ячеек памяти и разрядность каждой из них)</li>
    <li>Время доступа к ячейкам памяти (скорость работы микросхемы).</li>
</ul>
<p>Оперативная память выпускается в виде микросхем, собранных в специальные модули памяти. Несколько лет назад в ходу были 72 – контактные модули типа SIMM. В 1998 году появились 168 –контактные модули DIMM, которые можно было устанавливать по одиночке. В настоящее время каждый модуль DIMM может вмещать от 1 до 512 Мбайт оперативной памяти.</p>
<p>На сегодняшний день существует два модуля оперативной памяти и шесть видов памяти устанавливаем в данный модуль:</p>
<ul>
    <li>EDO DRAM - это устаревшая оперативная память которая работает на частоте шины не более 66 МГц и временем доступа 50-70 наносекунд. Сегодня модули EDO используются исключительно для модернизации встроенной памяти на некоторых моделях лазерных принтеров.</li>
    <li>SDRAM – используется в персональных ПК Pentium III, Celeron устанавливаются преимущественно модули, снабженные памятью типа SDRAM. Время доступа к данным составляет 6-9 наносекунд, а пропускная способность от 256-1000Мб\с.</li>
    <li>RDRAM - поддерживает рабочую частоту шины до 800 МГц и время доступа к памяти в 4 наносекунды. Но так как данный модуль появился раньше чем процессор Р4 то он оказался весьма качественным «тормозом». </li>
    <li>DDR SDRAM - работает вдвое быстрее чем RDRAM ее пропускная способность достигает 2,5Гб\с,  а время доступа составляет 5-6 наносекунд. Что касается частоты шины, то у DDR SDRAM   она составляет 600-700 МГц . При этом за счет изменения архитектуры  DDR SDRAM обрабатывает за один такт вдвое больше данных чем RDRAM производства Intel. В настоящее время широко применяется оперативная память 256 и 512 Мб. </li>
    <li>DDR2 SDRAM Как раз в этом и проявляется одна из новаций технологии DDR2. Различие в том, что у модуля DDR2 буфер I\O работает на частоте, превышающий частоту ядра в два раза. Так за один такт передается два блока данных и скорость передачи по сравнению с DDR увеличивается в два раза. Иначе говоря, для достижения той же полосы пропускания, что и у DDR-памяти, ядро чипа DDR2 может работать в два раза медленнее. Поэтому благодаря меньшим значениям тактовой частоты ядра уменьшается и нагрузка на чип, за счет чего значение питающего напряжения снижено до 1,8В. А это приводит к уменьшению выделения тепла модулем ОЗУ. Повышение тактовых частот способствует уменьшению размера транзисторов. Становится короче интегрированные в чип проводники, автоматически уменьшается время реакции транзисторов.</li>
    <li>DDR3 SDRAM — это тип оперативной памяти, используемой в вычислительной технике в качестве оперативной и видеопамяти. Пришла на смену памяти типа DDR2 SDRAM, увеличив размер предподкачки с 4 бит до 8 бит. У DDR3 уменьшено потребление энергии по сравнению с модулями DDR2, что обусловлено пониженным (1,5 В, по сравнению с 1,8 В для DDR2 и 2,5 В для DDR) напряжением питания ячеек памяти. Существует вариант памяти DDR3L (L означает Low) с ещё более низким напряжением питания, 1,35 В, что меньше традиционного для DDR3 на 10 %. Также существует модули памяти DDR3U (U означает Ultra Low Voltage) с напряжением питания 1,25 В, что ещё на 10 % меньше, чем принятое для DDR3L. Микросхемы памяти DDR3 производятся исключительно в корпусах типа BGA. Типичные объёмы обычных модулей памяти DDR3 составляют от 1 ГБ до 16 ГБ.</li>
    <li>DDR4 SDRAM — четвёртое поколение оперативной памяти, являющееся эволюционным развитием предыдущих поколений DDR SDRAM. Отличается повышенными частотными характеристиками и пониженным напряжением питания. Основное отличие DDR4 от предыдущего стандарта DDR3 заключается в удвоенном до 16 внутренних банков, что позволило увеличить скорость передачи внешней шины. Пропускная способность памяти DDR4 в перспективе может достигать 25,6 ГБ/c (в случае повышения максимальной эффективной частоты до 3200 МГц). Кроме того, повышена надёжность работы за счёт введения механизма контроля чётности на шинах адреса и команд.</li>
</ul>
<p>Особенность данной памяти является то, что ее архитектура, предусматривает соединение типа «точка-точка», где каждый канал на контроллере памяти подключается к одному модулю. Для повышения надежности обмена данных, поддерживается циклическая проверка избыточности.</p>
<img class="simple_img" src="img/UL9e__34RXE.jpg" alt="">
</div>
`;

const divTimeoutText = `<div class="architecture_3_list">
<h3 id="architecture_3_6">Подтайминги</h3>
<h4>Тайминги</h4>
<p><b>Тайминг</b>– это задержка, устанавливающая время, необходимое для выполнения какой-либо команды, от ее отправки, до начала выполнения.</p>
<img class="simple_img" src="img/fuhWcLjO-E0.jpg" alt="">
<p><b>CL</b> – задержка чтения, это минимальное время между подачей команды на чтение и началом передачи данных. Данный тайминг определяет технологический процесс изготовления микросхемы и изменению со стороны пользователя не подлежит. </p>
<p><b>RCD</b> – время активации строки банка, это минимальное время между подачей сигнала на выбор строки и подачи сигнала на выбор столбца. Изменение данного тайминга может привести к зависанию ПК или его перезагрузки.</p>
<p><b>RP</b> – это время необходимое для предварительной зарядки банка, т.е. минимальное время между закрытием одной строки, после чего можно открыть новую строку. Система выдаст ошибку BIOS, ошибка чтения данных.</p>
<p><b>RAS</b> – это минимальное время активности строки, т.е. минимальное время между открытием строки и подачей команды на регенерацию т.е. подзарядка ячеек памяти или закрытие строки. Строка не может быть закрыта, раньше времени указанного в данном тайминге. </p>
<p><b>CR</b> (1/3T) – время необходимое для декодирования контролером памяти команд и адресов, т.е. минимальное время между подачей двух команд. Измеряется в тактах.  1/3T – одна команда, за три такта.</p>
<p>Кроме основных таймингов, могут быть использованы и дополнительными тайминги которое является производными между двумя таймингами и изменяют свои значения вместе с таймингами. </p>
<h4>Подтайминги</h4>
<p>Остальные тайминги имеют меньшее влияние на производительность, а потому их называют подтаймингами.</p>
<p><b>Trc</b>, Row Cycle Time, Activate to Activate/Refresh Time, Active to Active/Auto Refresh Time – минимальное время между активацией строк одного банка. Является комбинацией таймингов Tras+Trp – минимального времени активности строки и времени её закрытия (после чего можно открывать новую).</p>
<p><b>Trfc</b>, Row Refresh Cycle Time, Auto Refresh Row Cycle Time, Refresh to Activate/Refresh Command Period, – минимальное время между командой на обновление строки и командой активизации, либо другой командой обновления.</p>
<p><b>Trrd</b>, ACTIVE bank A to ACTIVE bank B command, RAS to RAS Delay, Row Active to Row Active – минимальное время между активацией строк разных банков. Архитектурно открывать строку в другом банке можно сразу за открытием строки в первом банке.</p>
<p>Ограничение же чисто электрическое – на активацию уходит много энергии, а потому при частых активациях строк очень высока электрическая нагрузка на цепи. Чтобы её снизить, была введена данная задержка. Используется для реализации функции чередования доступа к памяти (interleaving).</p>
<p><b>Tccd</b>, CAS to CAS Delay – минимальное время между двумя командами CAS#.</p>
<p><b>Twr</b>, Write Recovery, Write to Precharge – минимальное время между окончанием операции записи и подачей команды на предзаряд (Precharge) строки для одного банка.</p>
<p><b>Twrt</b>, Trd_wr, Write To Read – минимальное время между окончанием записи и подачей команды на чтение (CAS#) в одном ранке.</p>
<p><b>RTW</b>, Read To Write, (Same) Rank Read To Write – минимальное время между окончанием операции чтения и подачей команды на запись, в одном ранке. Same Rank</p>
<p><b>Write To Write Delayed</b> – минимальное время между двумя командами на запись в одном ранке.</p>
<p><b>Different Rank Write to Write Delay</b> – минимальное время между двумя командами на запись в разных ранках.</p>
<p><b>Twr_rd</b>, Different Ranks Write To READ Delayed - минимальное время между окончанием записи и подачей команды на чтение (CAS#) в разных ранках.</p>
<p><b>Same Rank Read To Read Delayed</b> – минимальная задержка между двумя командами на чтение в одном ранке.</p>
<p><b>Trd_rd</b>, Different Ranks Read To Read Delayed - минимальная задержка между двумя командами на чтение в разных ранках.</p>
<p><b>Trtp</b>, Read to Precharge – минимальный интервал между подачей команды на чтение до команды на предварительный заряд.</p>
<p><b>Precharge to Precharge</b> – минимальное время между двумя командами предварительного заряда.</p>
<p><b>Tpall_rp</b>, Precharge All to Active Delay – задержка между командой Precharge All и командой на активацию строки.</p>
<p><b>Same Rank PALL to REF Delayed</b> – устанавливает минимальное время между командой Precharge All и Refresh в одном ранке.</p>
<p><b>Different Rank REF to REF Delayed</b> – устанавливает минимальную задержку между двумя командами на обновление (refresh) в разных ранках.</p>
<p><b>Twcl</b>, Write Latency – задержка между подачей команды на запись и сигналом DQS. Аналог CL, но для записи.</p>
<p><b>Tdal</b>, цитата из JEDEC 79-2C, p.74: auto precharge write recovery + precharge time (Twr+Trp).</p>
<p><b>Trcd_rd/Trcd_wr</b>, Activate to Read/Write, RAS to CAS Read/Write Delay, RAW Address to Column Address for Read/Write – сочетание двух таймингов – Trcd (RAS to CAS) и rd/wr command delay. Именно последним и объясняется существование разных Trcd – для записи и чтения (Nf2) и установки BIOS – Fast Ras to Cas.</p>
<p><b>Tck</b>, Clock Cycle Time – период одного такта. Именно он и определяет частоту памяти. Считается она следующим образом: 1000/Tck=X Mhz (реальная частота).</p>
<p><b>CS</b>, Chip Select – время, необходимое на выполнения команды, подаваемой сигналом CS# для выбора нужного чипа памяти.</p>
<p><b>Tac</b>, DQ output access time from CK – время от фронта такта до выдачи данных модулем.</p>
<p><b>Address and Command Setup Time Before Clock</b>, время, на которое передача установок адресов команд будет предшествовать восходящему фронту такта.</p>
<p><b>Address and Command Hold Time After Clock</b>, время, на которое будут “заперты” установки адреса и команд после нисходящего фронта такта.</p>
<p><b>Data Input Setup Time Before Clock, Data Input Hold Time After Clock</b>, то же, что и вышеуказанные, но для данных.</p>
<p><b>Tck max</b>, SDRAM Device Maximum Cycle Time – максимальный период цикла устройства.</p>
<p><b>Tdqsq max</b>, DDR SDRAM Device DQS-DQ Skew for DQS and associated DQ signals – максимальный сдвиг между стробом DQS и связанными с ним сигналами данных.</p>
<p><b>Tqhs</b>, DDR SDRAM Device Read Data Hold Skew Factor – максимальный сдвиг “запирания” считанных данных.</p>
<p><b>Tch, Tcl</b>, CK high/low pulse width – длительность высокого/низкого уровня тактовой частоты CK.</p>
<p><b>Thp</b>, CK half pulse width – длительность полупериода тактовой частоты CK.</p>
<p><b>Max Async Latency</b> – максимальное время асинхронной задержки. Параметр управляет длительностью асинхронной задержки, зависящей от времени, необходимого для передачи сигнала от контроллера памяти до самого дальнего модуля памяти и обратно. Опция существует в процессорах фирмы AMD (Athlon\Opteron).</p>
<p><b>DRAM Read Latch Delay</b> – задержка, устанавливающая время, необходимое для “запирания” (однозначного распознавания) конкретного устройства. Актуально при повышении нагрузки (числа устройств) на контроллер памяти.</p>
<p><b>Trpre</b>, Read preamble – время, в течение которого контроллер памяти откладывает активацию приёма данных перед чтением, во избежание повреждения данных.</p>
<p><b>Trpst, Twpre, Twpst,</b>, Write preamble, read postamble, write postamble – то же для записи и после приёма данных.</p>
<p><b>Read/write Queue Bypass</b> – определяет число раз, которое самый ранний запрос в очереди может быть обойден контроллером памяти, прежде чем быть выполненным.</p>
<p><b>Bypass Max</b> – определяет, сколько раз самая ранняя запись в DCQ может быть обойдена, прежде чем выбор арбитра будет аннулирован. При установке в 0 выбор арбитра всегда учитывается.</p>
<p><b>SDRAM MA Wait State</b>, Read Wait State установка 0—2-тактного опережения адресной информации перед подачей сигнала CS#.</p>
<p><b>Turn-Around Insertion</b> – задержка между циклами. Добавляет задержку в такт между двумя последовательными операциями чтения/записи.</p>
<p><b>DRAM R/W Leadoff Timing</b>, rd/wr command delay – задержка перед выполнением команды чтения/записи. Обычно составляет 8/7 или 7/5 тактов соответственно. Время от подачи команды до активации банка.</p>
<p><b>Speculative Leadoff</b>, SDRAM Speculative Read. Обычно в память поступает сначала адрес, затем команда на чтение. Поскольку на расшифровку адреса уходит относительно много времени, можно применить упреждающий старт, подав адрес и команду подряд, без задержки, что повысит эффективность использования шины и снизит простои.</p>
<p><b>Twtr Same Bank</b>, Write to Read Turnaround Time for Same Bank – время между прекращением операции записи и подачей команды на чтение в одном банке.</p>
<p><b>Tfaw</b>, Four Active Windows – минимальное время активности четырех окон (активных строк). Применяется в восьмибанковых устройствах.</p>
<p><b>Strobe Latency.</b> Задержка при посылке строб-импульса (селекторного импульса).</p>
<p><b>Memory Refresh Rate.</b> Частота обновления памяти.</p>
</div>`;

const divHDDText = `<div class="architecture_3_list">
<h3 id="architecture_3_7">Накопитель на магнитных дисках</h3>
<p>До сих пор самым важным устройствами для хранения данных в ПК остаются накопители на магнитных дисках и это, не смотря на успехи в области оптической записи информации и достижения твердотельной микроэлектроники.</p>
<h4 class="memory_header_mini">Логическая структура жесткого диска</h4>
<p>Данные на диске записываются блоками на концентрические дорожки. Стандартный объем блока составляет 512 байт, количество блоков на дорожке, примерно одинаковое это достигается за счёт того, что между блоками существует промежуток синхронизации, который позволяет создать на дорожке сектора позволяет создать одинаковый объем данных. Самая первая дорожка 0 записывается у края жесткого диска. У центра диска имеются запасные дорожки, которое предназначены для хранения резервных блоков, защиты от копирования, а также хранение специализированной программы SMART.</p>
<p>Каждая дорожка однозначно определяется номером головки и порядковым номером на диске относительно внешнего края. Сектора идентифицируются своим порядковым номером относительно начала дорожки. Нумерация секторов на дорожке начинается с единицы, а головок и цилиндров — с нуля.</p>
<p>Количество секторов может быть различным (от 17 до 150) в зависимости от типа накопителя. Каждый сектор содержит некоторую служебную информацию и данные. Обычно объем сектора составляет 571 байт. В начале каждого сектора записывается заголовок {Prefix portion), по которому определяется начало сектора и его номер, а в конце сектора {Suffixportion — заключении сектора) содержится контрольная сумма, необходимая для проверки целостности данных.</p>
<p>Данные в секторе хранят служебную информацию, которая информирует контроллер дисковода о размере сектора</p>
<p>Данные как правило записанные по принципу Фон Неймана, т.е. независимо от размера данных записанные в сектор считывается весь сектор. Исходя из этого на диске остается много пустого места (на 1 гигабайт – 1 килобайт пустого места), поэтому для борьбы с хвостами на логическом уровне данные разбиваются не на блоки, а на кластеры.</p>
<b>Кластер – это минимальная логическая единица элемента структуры хранения информации на диске, минимальной по ёмкости, который в зависимости от файловой системы, может хранить от нескольких десятках байт до 4 килобайт.</b>
<p>Разбиение на кластеры происходит при форматировании жёсткого диска. Современные жёсткие диски представляют собой, несколько носителей информации, нанизанных на один шпиндель. Запись на данные диски происходит с 2х сторон синхронно, такой тип записи называется цилиндром.</p>
<figure class="figure smaller">
<img src="img/q_27FbB6t68.jpg" alt="">
    <figcaption>
        <p>Физическое устройство жесткого диска</p>
    </figcaption>
</figure>
<p>Поверхности всех дисков входящим в массив, разбиваются на сектора. </p>
<p>Количество секторов на поверхности – 63. В самом начале диска, в секторе 0/0/1 PT, записывается таблица разделов (порционная таблица). </p>
<p>Таблица разделов состоит из 4х строк, описывающих возможные разделы жесткого диска. Описание каждого раздела содержит информацию: о типе файловой системе, признаках того, что раздел является загрузочным и о первых и последних дорожках сектора разделов. </p>
<p>Главная загрузочная запись (MBR)Главная загрузочная запись представляет собой, код процессора необходимый для загрузки ОС. В последних двух байтах сектора MBR находится сигнатура 55AAh, которую можно использовать как маску при поиске PT и MBR.
<p>На следующем треке в первом(ых) секторе(ах) (начиная с 0/1/1) расположена BA (Boot Area) - загрузочная область операционной системы и BR (Boot Reco rd) - загрузочная запись OC.</p>
<p>BR - содержит массу данных и служит для описания параметров файловой системы. В отличие от диска, минимальным адресуемым блоком данных для операционной системы служит кластер, объединяющий определенное количество секторов. В BR нам интересны такие данные как размер кластера, размер и количество копий FAT. BR для раздела FAT16 размещается в одном секторе, в случае FAT32 Boot Record состоит из нескольких секторов.</p>
<p>Далее на этом же треке расположена 1-я копия FAT (File Allocation Table) - таблица размещения файлов. Сразу за ней - 2-я копия FAT. Размер копии FAT (в секторах) определяется размером раздела диска. </p>
<p>FAT - Состоит из 12, 16 или 32 битных элементов, описывающих номера кластеров или их признаки (BAD). Количество элементов соответствует количеству кластеров раздела диска. Из этих элементов образуются цепочки номеров кластеров, описывающих расположение файлов на диске.</p>
<p>После 2-й копии FAT расположены сектора ROOT (Root directory) - корневого каталога, за которой начинается DA (Data Area) - область данных.</p>
<p>ROOT - Корневой каталог диска. Содержит записи описывающие файлы (дескрипторы файлов) в корневом каталоге. Такая запись описывает имя, тип, дату создания, размер, атрибуты файла, и т.п., а так же содержит указатель на первый кластер файла.</p>
<p>Каталоги представляют собой сектора идентичные по структуре корневому каталогу. Каталог, кроме описаний файлов, в самом начале содержит две записи, первая из которых содержит указатель на первый кластер самого каталога, вторая на первый кластер родительского каталога.</p>
<h4>Физическая структура НЖМД</h4>
<p>Накопители на жестком диске в одном корпусе объединяют носитель информации, выполненный в виде алюминиевой или стеклянной пластины, нанесенной на нее поверхность ферромагнитным слоем. На один шпиндель (ось) может быть надето от 1 до 8 накопителей информации.</p>
<p>Устройство чтения и записи представляет собой коромысло, способное намагничивать с двух сторон накопитель. Перемещения головок чтения и записи, а также вращение носителя информации, осуществляется с помощью двигателя. </p>
<p>Двигатели бывают двух типов: шаговый и линейный привод. Система с шаговым двигателем –перемещаются головки на величину, соответствующую расстоянию между дорожками с помощью червячной передачи. Дискретность шагов зависит от характеристик шагового двигателя в некоторых случаях место для парковок диска задается серверными методами или специальными оптическими датчиками. Основным достоинством считается надежность диска при вибрации. Недостатком шагового механизма является низкая скорость вращения носителей (4500-5200 оборотов в минуту). </p>
<p>Поэтому применяется система с линейным приводом, где головки перемещаются электромагнитом, а для определения необходимого положения используется специальные сервисные сигналы, записанные на диск при его производстве. Основными преимуществами линейных приводов является скорость вращения носителей информации от 7200 до 15000 кроме того при нагреве носителей головкам может перемещается радиально в пределах одной дорожки. Недостатком является пониженный уровень надежности механической части. </p>
<p>Все вышеперечисленные элементы располагаются в герметичной камере которые соединяются с внешней средой через специальным силикагелевый фильтр, данный фильтр защищает жесткий диск от пыли и влаги и создает постоянное атмосферное давление. </p>
<h4 class="memory_header_mini">Интерфейсная часть жёсткого диска</h4>
<p>Представляет собой миникомпьютер, собранный на одной плате.</p>
<img class="simple_img" src="img/-i2RRIm7MNs.jpg" alt="">
<p>Процессор отвечает за обработку цифрового сигнала и при образовании его в электрический с последующей передачей к другим устройствам. </p>
<h4 class="memory_header_mini">Память жесткого диска</h4>
<p>Хранит двоичный код и служит для преобразования, параллельно считанных 16 разрядных данных с цилиндра диска в 32х разрядный последовательный код.</p>
<h4 class="memory_header_mini">Аппаратный интерфейс</h4>
<p>Представлен в виде шин IDE, SATA, SCSI служат для подключения жесткого диска к материнской плате, через контроллер к южному мосту.</p>
<h4 class="memory_header_mini">Основные характеристики жесткого диска</h4>
<p>Размер диска – определяет плотность записи на магнитной дорожке и диаметр диска. Не имеет стандартизации, но может быть размером 2.2, 2.3, 3.14, 5.25 дюймов.</p>
<p>Число поверхностей – определяет физическое количество дисков, нанизанных на один шпиндель.</p>
<p>Число цилиндров – определяет сколько дорожек, будет располагался на одной поверхности, определяет количество секторов на одной дорожке. </p>
<p>Частота вращения шпинделя – измеряется в оборотах в минуту и влияет на время доступа к данным. </p>
<p>Время доступа – это суммарное время, затрачиваемое на установку головки в сектор ожидания</p>
<p>Размер буфера – отвечает за упреждающее кеширование и признана снизить разность быстродействия между оперативной памяти и жёстким диском.</p>
<p>Среднее время наработки на отказ (MTBF) – определяет сколько времени способен проработать накопитель без сбоев. Оценка у каждого производителя своя.</p>
<p>Наличие технологии SMART – технология анализа надежности жестких дисков.</p>
<h4>Технология SMART</h4>
<p>Технология S.M.A.R.T. {Self-Monitoring Analysis and Reporting Technology) была разработана с участием крупнейших производителей винчестеров. Для анализа надежности жесткого диска используются две группы параметров:</p>
<ul>
    <li>параметры естественного старения диска
        <ol>
            <li>Количество оборотов двигателя за время работы</li>
            <li>Количество перемещений головок чтения/записи</li>
        </ol>
    </li>
    <li>текущие параметры
        <ol>
            <li>Высота головки чтения/записи над рабочей поверхностью</li>
            <li>Скорость обмена данными между дисками и ,буферной памятью накопителя (кэш-памятью) винчестера</li>
            <li>Количество переназначенных поврежденных (bad) секторов </li>
            <li>Скорость поиска данных на диске</li>
        </ol>
    </li>
</ul>
<p>Вся информация записывается на специальных дорожках, не доступных для аппаратных и программных средств.</p>
<p>Существует три версии технологии S.M.A.R.T.</p>
<ul>
    <li>S.M.A.R.T.-I обеспечивает предсказание ошибок, на основании анализа состояния диска в режиме On-line.</li>
    <li>S.M.A.R.T.- II добавлена возможность сканирования поверхности диска в режиме Of-line, то есть, когда диск работает в режиме холостого хода.</li>
    <li>S.M.A.R.T. -III в дополнение к возможностям предыдущих версий опреде­ляет и восстанавливает проблемные сектора.</li>
</ul>
<p>Если ваш винчестер поддерживает технологию S.M.A.R.T., то при запуске PC после тестирования памяти на экране монитора появится соответствующее сообщение, типа
    Pri Master: 17.01J17 WDC AC28400R
    Ultra DMA Mode-2 S.M.A.R.T. Capable and Status OK</p>
<p>Как правило, BIOS предоставляет возможность пользователю включить (или отключить) режим S.M.A.R.T. через установки CMOS Setup.</p>
<p>Программа SMART существует в 3х версиях:</p>
<ol>
    <li>Обеспечивает предсказание ошибок на состоянии жёсткого диска в режиме online;</li>
    <li>Дополнение к 1 добавлена возможность в режиме offline т.е. когда диск работает в режиме холостого хода;</li>
    <li>К первым двум добавляют возможность определение и восстановление проблемных секторов.</li>
</ol>
<h4 class="memory_header_mini">Особенности работы современных SSD-дисков</h4>
<p>Производительность современных центральных процессоров, определяющих вычислительные возможности ПК, существенно превосходит производительность традиционных жестких дисков (HDD). В результате именно подсистемы хранения данных во многих случаях становятся узким местом, сдерживающим рост производительности компьютеров в целом. Использование дорогостоящих решений на основе RAID-массивов лишь отчасти позволяет решить проблему дисбаланса в производительности процессоров и подсистем хранения данных на основе HDD. И в дальнейшем дисбаланс производительности процессоров и HDD-дисков будет только увеличиваться, и мы неизбежно придем к тому, что производительность компьютера во многих приложениях уже перестанет определяться производительностью процессора, а будет упираться в самое слабое звено — подсистему хранения данных. Так, с 1996 года усредненная производительность процессоров выросла в 175 раз, в то время как производительность HDD-дисков (имеется в виду выборочное чтение блоков размером 20 Кбайт) — всего в 1,3 раза.</p>
<p>Самое слабое место SSD-дисков — это операции случайной записи и снижение производительности SSD-диска по мере его эксплуатации, то есть производительность нового диска (еще не применявшегося) и уже заполненного диска (удаление файлов не всегда означает их физическое удаление из блоков памяти диска) могут существенно различаться.</p>
<p>С точки зрения технологии SSD диски — это флешка с большим количеством чипов памяти и контролером. Большим отличием твердотельных накопителей, по сравнению, с жесткими дисками, это отсутствие движущих частей (выход из строя механической составляющей HDD составляет 10-15% от всех случаев потери информации).</p>
<p>Существует всего 2 типа SSD накопителей: SSD диски на основе флеш-памяти (самые популярные и распространенные), и SSD на основе оперативной памяти.</p>
<p>Описание преимуществ и недостатков SSD накопителей будет проводится в сравнении с жесткими дисками (HDD).</p>
<p>Преимущества SSD накопителей:</p>
<ul>
    <li>Отсутствие механических составляющих;</li>
    <li>Скорость чтения и записи подравнивается скорости работы жестких дисков с интерфейсом (SATA2 - 3 Гб/с, SATA3 – 6 Гб/с ) и возможностям применяемых контроллеров;</li>
    <li>Низкое потребление энергии;</li>
    <li>Низкий уровень шума (из-за отсутствия движущихся частей);</li>
    <li>Высокая стойкость к механическим воздействиям (падения, удары);</li>
    <li>Стабильность времени считывания файлов вне зависимости от их расположения или фрагментации;</li>
    <li>Малые габариты и вес;</li>
    <li>Широкий потенциал для улучшения характеристик и технологий производства.</li>
</ul>
<p>Недостатки SSD накопителей:</p>
<ul>
    <li>Ограничение на количество циклов перезаписи: (MLC, Multi-level cell, многоуровневые ячейки памяти) флеш-памяти - около10 000 раз, более дорогие типы памяти (SLC, Single-level cell, одноуровневые ячейки памяти) — около 100 000 раз;</li>
    <li>Высокая цена SSD накопителя. Стоимость SSD дисков прямо пропорциональна их объему, тогда как стоимость жёстких дисков зависит от количества пластин и менее зависит от объема накопителя.</li>
</ul>
<p>Плюсы HDD диска.</p>
<ul>
    <li>Приемлемая цена</li>
    <li>Срок службы долгий</li>
    <li>Имеет большой объем памяти. На сегодня есть диски объемом более 6 Терабайт (6000 Гигабайт).</li>
    <li>Устойчив к статическим зарядам.</li>
</ul>
<p>Минусы HDD диска.</p>
<ul>
    <li>Больше чем SSD диск, занимает больше места.</li>
    <li>При работе шумит</li>
    <li>Медленнее реагирует на команды</li>
    <li>Потребляет больше электроэнергии</li>
</ul>
<p></p>
<p></p>
</div>
`;
const divVideoCardText = `<div class="architecture_3_list">
<h3>RAID - массивы</h3>

<h3 id="architecture_3_8">Видеокарты</h3>
<p>Видеокарта предназначена для преобразования цифрового сигнала, хранящегося в оперативной памяти в аналоговый сигнал монитора.</p>
<p>Обычно видеокарта является платой расширения и вставляется в разъём расширения, универсальный (ISA, VLB, PCI, PCI-Express) или специализированный (AGP), но бывает и встроенной (интегрированной).</p>
<p>Современные видеокарты не ограничиваются простым выводом изображения, они имеют встроенный графический микропроцессор, который может производить дополнительную обработку, разгружая от этих задач центральный процессор компьютера.</p>
<p>Например, все современные видеокарты NVIDIA и AMD(ATi) поддерживают приложения OpenGL на аппаратном уровне.</p>
<h4 class="memory_header_mini">Формат предоставления видео сигнала</h4>
<p>Низкочастотный видео сигнал является композитным т.е. представляет собой результат сложения яркостного света и двух световых несущих Y V, а также синхроимпульсов, причем сигналы цветности, лежат в пределах полосы спектора яркостного сигнала. </p>
<p>Композитивный видео сигнал в системах класса VHS, имеет разрешение 240 строк. </p>
<p>Цифровая обработка сигналов, т.е. обработка сигнала из аналоговую в цифровую и обратно, выделяет выполнение трех основных операций</p>
<ol>
    <li>Дискретизация – представление непрерывного аналогового сигнала в виде последовательности его значений, который называется отсчетами. Эти отсчёты берутся в моменты времени, отделенные друг от друга интервалом, которые называются интервалом дискретизации, величину обратную интервалу между отсчётами, называют частотой дискретизации. Для того что бы осуществить обратное восстановление из цифрового сигнала в аналоговый, необходимо что бы частота дискретизации, как минимум была в 2 раза выше, частоты исходного аналогово сигнала (теорема Котельникова). Чем выше частота дискретизации, тем выше должна быть частота тактового процессора видеокарты.</li>
    <li>Квантование – это округление величины отсчета, т.е. замена текущей величины отсчета, ближайшим значением, из набора фиксированных величин уровня квантования, уровни квантования, делят весь диапазон возможного изменения значения сигнала, на конечное число интервалов, которые называются шагом квантования, искажение сигнала возникающие при квантовании, называется шумом квантования. Чем больше уровней квантования, чем меньше шум.</li>
    <li>Кодирование – совокупность знаков и система правил, с помощью которых дискретный и квотированный сигнал можно представить с помощью набора символов, т.е. присвоить ему имя, которое называется кодовым словом. Кодовое слово может быть двоичным и иметь возможность преобразования в шестнадцатеричную или десятеричную систему. Каждое кодовое слово, передается в пределах одного интервала дискретизации.</li>
</ol>
<p>Видеокарта состоит из следующих узлов:</p>
<ul>
    <li>графический процессор – занимается расчетами выводимого изображения, разгружая центральный процессор от обработки команд 3D графики.</li>
    <li>Видеопамять – выполняет роль кадрового буфера, в котором хранится изображение, генерируемое и постоянно изменяемое, графическим процессором. В видеопамяти хранятся промежуточные не видимые на экране элементы изображения (не печатанные символы, линии построения, псевдографика) </li>
    <li>Видео BIOS – постоянно запоминающее устройство которое хранит экранные шрифты, кодовые таблицы и используется для загрузки компьютера в текстовом режиме до определения операционной системы т.е. ПЗУ содержит системные данные которое могут читаться и интерпретироваться драйвером на начальном этапе загрузки видео карты.</li>
    <li>Видеоконтроллер – отвечает за формирования изображения видеокарты и дает команду цифроаналоговую преобразователю ЦАП = RAMDAC на формирование сигналов развертки для мониторов. Видеоконтроллер также обрабатывает запросы центрального процессора, он состоит из внешней шины данных, видеокарты, которая может быть 64, 128 и 256 разрядными.</li>
    <li>Цифроаналоговый преобразователь – служит для преобразования изображения, формируемого видеоконтроллером в уровни интенсивности цвета подаваемое на аналоговый монитор, возможный диапазон цветности изображения определяется только параметрами ЦАП. Цифроаналоговый преобразователь имеет 2 контроллера, которые работают независимо друг от друга.</li>
    <p>ЦАП состоит из 3х блоков RGB и четвертый блок SRAM которой хранит информации о гамме коррекции. Бюджетные ЦАП имеют разрядность 8 бит на 1 канал, что позволяет на 1 канале создать 256 уровней яркости. На каждый основной цвет за счет гамма коррекции появляется возможность создать 16,5 миллионов оттенков. Профессиональные видеокарты имеют 10 бит на 1 канал что позволяет создать 1024 уровней яркости или до 1 миллиарда оттенков.</p>
</ul>
<h4 class="memory_header_mini">Технология создания графических эффектов</h4>
<p>Графические эффекты, создаются с помощью шейдеров, которые бываю вершинными и пиксельными. Шейдер специальная программа, которая определяет, правила расчета графической информации, она использует программированные регистров графического процессора доя создания различных графических эффектов, вершинные шейдеры.</p>
<p>Вершинные шейдеры – позволяю производить различные геометрические преобразования и имеют 127 инструкций и создают эффекты типа: деформация объектов, плавный морфинг, (размытие объекта при движении), неограниченное количество источников цвета. </p>
<p>Каждая вершина определяется несколькими переменными, например, положение вершины в 3D пространстве определяется координатами: x, y и z.</p>
<p>Вершины также могут быть описаны характеристиками цвета, текстурными координатами и т.п.</p>
<p>Пиксельные шейдеры – отвечают за наложение текстур т.е. за раскраску объекта.</p>
<p>Пиксельные шейдеры позволяют программистам создавать эффекты взрыва, дождя, пыли, дыма, наличие тени на неровной поверхности и т.д. Всего используется 8 пиксельных шейдеров.</p>
<p>Наложение текстур может осуществляется в несколько конвейерах формирования изображения видео карты, осуществляется в 3 основных этапа. На 1 этапе данные о вершинах текстур поступают в вершинные конвейеры, которые занимаются расчетами параметров геометрии на этом этапе подключается блок трансформации и освещения, который создает 3D сцену за счет обработки данных в вершинном конвейере. Второй этап – сформированное изображение на 1 этапе передается в Z буфер для отсечения невидимых полигонов и граней 3D объектов. Далее происходит процесс фильтрации текстур с помощью пиксельных шейдерой. 3 этап – происходит построение изображения конвейерной обработки, после чего данные передаются в память видеокарты.</p>
</div>`;

const divInterfaseText = `<h2 id="interface">Интерфейсы компьютерных систем</h2>
<p><b>Интерфейс</b> - это совокупность механических, электрических и программных характеристик линий связи, которые позволяют соединить воедино и организовать обмен информацией между двумя объектами. Любые внешние устройства подключаются к ПК через интерфейс (сопряжение). На программном уровне интерфейс поддерживается драйвером, который входит либо в состав операционной системы, либо в комплект поставки устройства, либо «зашит» внутри компонента. </p>
<p>К основным характеристикам интерфейса относятся:</p>
<ul>
    <li>Функциональное назначение</li>
    <li>Тип организации связей</li>
    <li>Принцип обмена информацией </li>
    <li>Способ обмена информацией</li>
    <li>Режим обмена</li>
    <li>Количество линий</li>
    <li>Число линий для передачи данных</li>
    <li>Количество адресов</li>
    <li>Количество команд</li>
    <li>Быстродействие</li>
    <li>Длина линий связи</li>
    <li>Число подключаемых устройств</li>
    <li>Тип линий связи</li>
</ul>
<p><b>По функциональному назначению</b> интерфейсы компьютерной системы принято разделять на внешние (ввода-вывода) и внутренние. Внешние предназначены для подключения периферийных устройств и изменяет функциональные возможности компьютерной системы. Внутренние интерфейсы делятся на системные и локальные. К системным интерфейсам относятся системные шины FSB, QPI, HT, DMI и шина памяти DRAM. К локальным интерфейсам ISA, PCI, AGP, PCI – E, IDE, SATA. К периферийным интерфейсам относятся RS-232C (COM-port), USB, LPT, PS/2.</p>
<p><b>По типу организации связей</b> интерфейсы подразделяются радиальные, древовидные, радикально-магистральные. </p>
<p><b>По способу обмена информацией</b> с параллельной, последовательной, параллельно-последовательной передачей информации.</p>
<p><b>По способу передачи информации</b> различают с синхронной передачей данных (с постоянной временной привязкой в цикле сбора информации), асинхронный (без постоянной временной привязки к определенному временному интервалу).</p>
<ul>
    <li>Синхронный обмен – это метод, при котором порядок и такт обмена задает ЭВМ, синхронизируя каждую передачу информации. Этот метод требует готовности абонентов до начала обмена. Синхронный обмен может использоваться тогда, когда известно время подготовки всех абонентов.</li>
    <li>При асинхронном обмене информацией предполагается возможность обмена информацией в любой момент без синхронизации специальными сигналами. Возможны два варианта такого обмена: по готовности и по прерыванию.</li>
</ul>
<p>Асинхронный обмен информацией по готовности заключается в выдаче абонентом сигнала готовности по специальной линии управления. ЭВМ проверяет наличие сигналов готовности абонентов, если готовность есть, то производится обмен, если нет, то опрашивается следующий абонент.</p>
<p>Асинхронный обмен информацией по прерыванию заключается в запросе абонентом у ЭВМ обмена информацией (специальным сигналом запроса прерывания). Если ЭМВ разрешает прерывание своей основной (фоновой) программы (специальным сигналом разрешения запроса прерывания), то вступает в действие специальная процедура обработки данного запроса прерывания и производится обмен информацией (ввод или вывод). Обмен по прерыванию позволяет эффективно использовать машинное время, т.к. ЭВМ не должна многократно повторять проверку готовности абонента.</p>
<ul>
    <li>Программно-независимый обмен использует принцип прямого доступа к памяти – это особый метод обмена, при котором выполнение программы ЭВМ приостанавливается не более чем на один машинный цикл, т.е. практически параллельно могут выполняться две основных функции ЭВМ (выполнение основной программы и ввода\вывода информации по каналу прямого доступа к памяти).</li>
</ul>
<p><b>По принципу построения</b> интерфейсы бывают:</p>
<ul>
    <li>Централизованный принцип построения интерфейса предполагает единый блок обмена, осуществляющий все основные функции: прием запроса обслуживания, формирования управляющих сигналов чтения и записи информации, идентификацию абонентов и т.д.</li>
    <li>Децентрализованный принцип построения интерфейса имеет функции обмена, распределенные между ЭВМ и абонентами.</li>
    <li>Магистральная структура связывает группы абонентов с ЭВМ с помощью одной коллективной шины. Такая структура обладает большой гибкостью т.к. с помощью общей шины возможен обмен информацией между любой парой блоков входящих в систему.</li>
</ul>
<p>Кроме того, при коллективной системе шин меньше затрат оборудования (кабели разъемы и т.д.), что делает магистральную структуру более перспективной в бортовых авиационных системах. Подключение к шине осуществляется с помощью цифрового мультиплексора с использованием ответвлений. К ответвлениям подключены оконечные устройства (абоненты).</p>
<h3 id="interface_1">Интерфейсы локальных сетей</h3>
<p><b>ISA</b> – индустриальный архитектурный стандарт - представляет локальную шину предназначенную для подключения плат расширения </p>
<p>ISA собой 8 или 16 разрядную. Передача 8 бит данных осуществляется с частотой 8 МГц/сек и скоростью 4 Мб. . Для передачи каждого байта, требуется минимум 2 такта Архитектура шины параллельная, каждые 8 бит сопровождаются 20 битами адреса. 34 бита используется для управляющего сигнала, напряжение питания +-5 В. Особенность шины - разъёмы, сконфигурированные в виде моста, работают по очереди, т.е. пока данные с одного разъёма не будут загружены, то и со второго загружаться не будут.</p>
<p><b>PCI</b> – последовательный интерфейс, поддерживающий синхронный обмен данными формата 32 либо 64 бита, при этом интерфейс использует метод мультиплексирования, (т.е. передача адресов и данных осуществляется по очереди по одним и тем же линия). Данные передаются по шине в виде линейных пакетов, т.е. данные при чтении и записи передаются после передачи пакета с адресом, при этом каждому следующему пакету данных № присваивается автоматически, увеличиваясь на 1. Все сегменты на материнской плате сгруппированы по принципу моста по 4 сегмента а 1 контроллер. Сегменты поддерживают автоматические уровни сигнала в +5 В и +3,3 В. Следующая особенность PCI – данные порты могут быть сконфигурированы через BIOS</p>
<p>Благодаря такому подходу, шина PCI подразумевает работу на частотах PCI 1.1- 33 МГц, PCI 2.2 - 66 МГц, PCI X - 133 МГц. PCI X - скорость 132 Мб/сек.</p>
<p><b>AGP</b> – ускоренный графический порт – была разработана для решения проблем 3D графики путём прямого соединения графической подсистемы с оперативной памятью через северный мост. Благодаря такому подходу была устранена мультиплексированность, имевшая место в шине PCI. Работает в 2 основных режимах: DMA – прямого доступа к памяти, DIME. В режиме DMA основной памятью считается память видеокарты, текстуры могут храниться в оперативной памяти, но перед использованием, копируется в память видеокарты. В режиме DIME локальная и системные памяти считаются равнозначными, данные не копируются в память видеокарты, а могут непосредственно выбираться из оперативной памяти. Такой режим часто используется в интегрированных видеокартах. Конвейеризация операций чтения и записи позволила устранить задержку в модулях памяти. Выпускалась в вариантах: AGP2x, AGP4x, AGP8x, т.е. определялась блоком данных, которые передаются видеокартой за один такт.</p>
<p><b>PCI – E</b> – представляет собой последовательную локальную шину, работающую на первых 3 уровнях модели OSI. Шина имеет топологию звезда со спаренными последовательными каналами передачи данных. Шина поддерживает горячее подключение устройств, гарантированную скорость обмена данными, управление потреблением энергии, контроль целостности передаваемой информации </p>
<p><b>Физический уровень</b> состоит из субблоков: электрический и логический.</p>
<p>Электрический субблок отвечает за электрическое согласование, синхронизацию и обнаружение приёмника.</p>
<p>Логический субблок выполняет распределение данных по линиям, кодирование по схеме 8бит/10бит, кодирования. Отвечает за согласование соединения и инициализацию устройств и преобразования параллельного кода в последовательный. </p>
<img src="img/Spr89bARoHg.jpg" alt="">
<p><b>Канальный уровень</b> отвечает за управление связью, обнаружение ошибок и организацию повторных передач в случае отказа соединения. Добавляет номер пакета и контрольную сумму, при этом сам является получателем пакетов DLLP, используемым для управления соединения на уровне транзакций.</p>
<p><b>Сетевой уровень (уровень транзакций)</b> верхний уровень архитектуры, отвечающий за разборку транзакционных пакетов, которые имеют уникальный идентификатор в виде заголовка, позволяющий направить ответный пакет отправителю в различных форматах. Данный уровень также может иметь возможность слежения за когерентностью кэшей.</p>
<img src="img/ovFiqsBTNAs.jpg" alt="">
<p><b>IDE</b> – (ATA, AT-Bus, UltraATA) – параллельный интерфейс, предназначенный для подключения жёстких дисков. Интерфейс 16-разрядный со скоростью передачи данных 2Мбайт/с. Спецификация контроллера в южном мосту предусматривает наличие 2 равноправных каналов. UltraATA использует 80-рязрядный шлейф, где 40 контактов заземлены, это позволило снизить электромагнитные помехи и позволило повысить производительность до 100 Мбайт/с. Длина шлейфа не может быть больше 46 см, контроллер IDE напрямую подключается к 32-разрядной шине PCI, поэтому все устройства, подключаемые к шине IDE имеют собственный кэш, который из 16-разрядных параллельных блоков данных формируют 32-разрядный последовательный пакет.</p>
<p><b>SATA</b> –последовательный интерфейс для передачи данных Соединение предусматривает подключение устройств по типу «точка-точка» т.е. к 1 контроллеру не более 1 устройства </p>
<p>Используется 8 жильный тонкий коаксиальный кабель длиной до 1 м. 
    Напряжение питания в данной шине 3,3 В, перепад напряжения 0,5 В, пропускная способность 187 Мбайт/с. </p>
<h3 id="interface_2">Периферийные интерфейсы</h3>
<p>USB – архитектура предусматривает топологию звезда, для которой корневой концентратор устанавливает в южном мосту. К корневому концентрату можно подключить до 127 периферийных устройств. Также концентратор предусматривает возможность расширения за счёт использования каскадных концентраторов. Шина USB предусматривает наличие 4-жильного кабель, где 2 жилы предназначены для питания, 2 для обмена данными.</p>
<p>Спецификация состоит из внешнего и внутреннего интерфейса.</p>
<p>Внутренний интерфейс делится на аппаратную часть (собственно концентратор и контроллер USB) и программную (драйвера контроллера, шины концентратора и клиентов).</p>
<p>Внешняя часть делится на классы (принтеры, сканеры, накопители и т.д.). Разделение на классы происходит по единому способу взаимодействия с шиной.</p>
<p>Сигналы в шине USB, в отличии от класса, передаются в различных форматах. Самый простой способ передачи заключается в передачи потока бит с маркером, при этом маркер путешествует в направлении корневого концентратора при этом не подключается к устройствам, а данные передаются при наличии свободной полосы пропускания.</p>
<p>Формат по прерываниям – опрос устройств происходит с фиксированной частотой, а передача данных осуществляется при получении сигнала о произошедшем событии.</p>
<p><b>RS-232C (COM-порт)</b> – последовательный интерфейс с асинхронной передачей данных, имеющей 2 разъёма, подключенных к 1 контроллеру, при этом работать будет либо одно уст-во, либо второе, т.к. приёмное уст-во постоянно прослушивает линию на наличие сигнала. В данном интерфейсе данные передаются по 1 проводу в виде пакетов размером 8 бит. В начале пакета 1 бит стартовый, в конце пакета 2 стоповых бита, после чего передаются 7 бит данных и 1 бит чётности. Интерфейс использует уровни напряжения от -15 B до +15 B, диапазон +5В – 5В для данного интерфейса не определяется. Порт может выдержать короткое замыкание до 20мА. Интерфейс используется для подключения внешних модемов, создание локальной сети по топологии кольцо, подключение мыши, принтера, средств программирования.</p>
<p><b>LPT – (IEEE1284)</b> – параллельный интерфейс предназначенный для обмена информацией между принтером и компьютером. Для каждого разряда в интерфейсе предназначен отдельный провод. Контроллер LPT интерфейса поддерживает 8битную шину данных и 5битную шину сигнала состояния, 4битную шину управления. Скорость передачи данных 150 Кб/с, длина 5 м. Конфигурация порта осуществляется средствами BIOS.</p>
<p>В качестве линий управления используется линия</p>
<p>«принтер не готов». Этот сигнал появляется тогда, когда принтер не готов к приёму данных или обрабатывает ранее полученные.</p>
<p>Линия «конец бумаги», в данной линии информируется процессор о неготовности принимать данные.</p>
<p>Линия «Выбор» выводит сигнал о состоянии принтера (вкл/выкл).</p>
<p>Линия «Ошибка» информирует о наличии неисправности в принтере.</p>
<p>Линия «Сброс», этим сигналом процессор заставляет принтер прекратить обработку любых данных и перейти в начальную установку.</p>
<p><b>PS/2</b> – подключение мыши и клавиатуры. Несмотря на то, что интерфейс носит одинаковые названия, они подключаются к разным контроллерам, тем самым не являются совместимыми. Данные передаются по каналам пакетами по 11 бит (8 из которых данные, 3 – управляющий сигнал). Интерфейс использует однополярный сигнал с уровнем напряжения +5B. Передача данных осуществляется в синхронном режиме.</p>
`;

divHistory.insertAdjacentHTML("afterbegin", divHistoryText);
history.insertAdjacentHTML("afterEnd", `
        <li class="nav_menu_aside_li"><a href="#history_2">Основные сведения об ЭВМ</a></li>
        <li class="nav_menu_aside_li"><a href="#history_3">Основные характеристики вычислительных машин</a></li>
        <li class="nav_menu_aside_li"><a href="#history_1">Виды информации и способы её представления</a></li>`)
//изначальный текст

function clear() {
    elem.forEach(index => {
        index.classList.remove('active');
    })
    divHistory.innerHTML = '';
    divArchitecture.innerHTML = '';
    divCPU.innerHTML = '';
    divCash.innerHTML = '';
    divBus.innerHTML = '';
    divMemory.innerHTML = '';
    divRAM.innerHTML = '';
    divTimeout.innerHTML = '';
    divHDD.innerHTML = '';
    divVideoCard.innerHTML = '';
    divInterfase.innerHTML = '';
    const menuItem = Array.from(document.querySelectorAll('.nav_menu_aside_li'));
    menuItem.forEach(index => {
        index.remove();
    })
}

history.addEventListener('click', () => {
    clear();
    divHistory.insertAdjacentHTML("afterbegin", divHistoryText);
    history.classList.add('active');
    history.insertAdjacentHTML("afterEnd", `
        <li class="nav_menu_aside_li"><a href="#history_2">Основные сведения об ЭВМ</a></li>
        <li class="nav_menu_aside_li"><a href="#history_3">Основные характеристики вычислительных машин</a></li>
        <li class="nav_menu_aside_li"><a href="#history_1">Виды информации и способы её представления</a></li>`)
});
architecture.addEventListener('click', () => {
        clear();
        architecture.insertAdjacentHTML("afterEnd", 
        `<li class="nav_menu_aside_li"><a href="#architecture_1">Общие сведения</a></li>
        <li class="nav_menu_aside_li"><a href="#architecture_3">Общее понятие архитектуры </a></li>
        <li class="nav_menu_aside_li"><a href="#architecture_3">Состав и функции основных блоков ВС</a>`)
        divArchitecture.insertAdjacentHTML("afterbegin", divArchitectureText);
        architecture.classList.add('active');
    } 
);
cpu.addEventListener('click', () => {
        clear();
        divCPU.insertAdjacentHTML("afterbegin", divCPUText);
        cpu.classList.add('active');
    }
);
cash.addEventListener('click', () => {
        clear();
        divCash.insertAdjacentHTML("afterbegin", divCashText);
        cash.classList.add('active');
    }
);
bus.addEventListener('click', () => {
    clear();
    divBus.insertAdjacentHTML("afterbegin", divBusText);
    bus.classList.add('active');
});
memory.addEventListener('click', () => {
    clear();
    divMemory.insertAdjacentHTML("afterbegin", divMemoryText);
    memory.classList.add('active');
});
ram.addEventListener('click', () => {
    clear();
    divRAM.insertAdjacentHTML("afterbegin", divRAMText);
    ram.classList.add('active');
});
timeout.addEventListener('click', () => {
    clear();
    divTimeout.insertAdjacentHTML("afterbegin", divTimeoutText);
    timeout.classList.add('active');
});
hdd.addEventListener('click', () => {
    clear();
    divHDD.insertAdjacentHTML("afterbegin", divHDDText);
    hdd.classList.add('active');
});
videoCard.addEventListener('click', () => {
    clear();
    divVideoCard.insertAdjacentHTML("afterbegin", divVideoCardText);
    videoCard.classList.add('active');
});
interfaces.addEventListener('click', () => {
    clear();
    interfaces.insertAdjacentHTML('afterEnd', 
    `<li class="nav_menu_aside_li"><a href="#interfaces_1">Интерфейсы локальных сетей</a></li>
    <li class="nav_menu_aside_li"><a href="#interfaces_2">Периферийные интерфейсы</a></li>`)
    divInterfase.insertAdjacentHTML("afterbegin", divInterfaseText);
    interfaces.classList.add('active');
});

// const divInterfaseLocalText = ``;
// const divInterfasePeripheryText = ` `;

